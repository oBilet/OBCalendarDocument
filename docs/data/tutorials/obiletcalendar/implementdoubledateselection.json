{"schemaVersion":{"minor":3,"patch":0,"major":0},"metadata":{"category":"","categoryPathComponent":"MeetObiletCalendar","title":"Implement Double Date Selection","role":"project"},"variants":[{"paths":["\/tutorials\/obiletcalendar\/implementdoubledateselection"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[{"title":"Implement Double Date Selection","estimatedTimeInMinutes":10,"kind":"hero","chapter":"Implement Date Selection","content":[]},{"tasks":[{"title":"Implement Double Date Selection","stepsSection":[{"code":"c3-t2-s1-s1.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Look at latest state of previous tutorial. Copy it and paste to file that name is "},{"code":"OBCalendarDemoDoubleSelection.swift","type":"codeVoice"}]}],"runtimePreview":"c3-t2-s1-s1.png","type":"step","caption":[],"media":null},{"content":[{"inlineContent":[{"type":"text","text":"Create a variable "},{"type":"codeVoice","code":"secondSelectedDate"},{"text":" to hold userâ€™s date selection and update ","type":"text"},{"type":"codeVoice","code":"selectDate(of:)"},{"type":"text","text":" function to select double date."}],"type":"paragraph"}],"caption":[],"type":"step","runtimePreview":"c3-t2-s1-s2.png","code":"c3-t2-s1-s2.swift","media":null},{"runtimePreview":"c3-t2-s1-s3.png","content":[{"inlineContent":[{"text":"Create ","type":"text"},{"type":"codeVoice","code":"modifySelectedDayView(date:content:)"},{"type":"text","text":" to edit selected days ("},{"type":"codeVoice","code":"firstSelectedDay"},{"type":"text","text":" and "},{"type":"codeVoice","code":"secondSelectedDay"},{"text":").","type":"text"}],"type":"paragraph"}],"media":null,"type":"step","caption":[],"code":"c3-t2-s1-s3.swift"},{"type":"step","caption":[],"media":null,"code":"c3-t2-s1-s4.swift","runtimePreview":"c3-t2-s1-s4.png","content":[{"inlineContent":[{"text":"Use ","type":"text"},{"code":"modifySelectedDayView","type":"codeVoice"},{"text":" function in ","type":"text"},{"code":"modifyDayView","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Create ","type":"text"},{"code":"modifyBetweenSelectedDateView(date:content:)","type":"codeVoice"},{"text":" function to edit selected between days.","type":"text"}]}],"caption":[],"code":"c3-t2-s1-s5.swift","media":null,"runtimePreview":"c3-t2-s1-s5.png","type":"step"},{"type":"step","content":[{"inlineContent":[{"text":"Use ","type":"text"},{"type":"codeVoice","code":"modifyBetweenSelectedDateView(date:content:)"},{"text":" function in ","type":"text"},{"code":"modifyDayView","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}],"runtimePreview":"c3-t2-s1-s6.png","caption":[],"media":null,"code":"c3-t2-s1-s6.swift"},{"caption":[],"media":null,"type":"step","code":"c3-t2-s1-s7.swift","runtimePreview":"c3-t2-s1-s7.png","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Update "},{"code":"modifySelectedDayView","type":"codeVoice"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Create "},{"type":"codeVoice","code":"RoundedCornerShape"},{"text":" structure to help.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Update secondSelectedDate background"}]}],"type":"step","runtimePreview":"c3-t2-s1-s8.png","media":null,"code":"c3-t2-s1-s8.swift","caption":[]}],"anchor":"Implement-Double-Date-Selection","contentSection":[{"kind":"contentAndMedia","mediaPosition":"trailing","content":[{"type":"paragraph","inlineContent":[{"text":"Implement Double Date Selection.","type":"text"}]}]}]}],"kind":"tasks"},{"abstract":[],"action":{"type":"reference","isActive":true,"identifier":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/ImplementYourCustomSpecialDay","overridingTitleInlineContent":[{"type":"text","text":"Get started"}],"overridingTitle":"Get started"},"featuredEyebrow":"Tutorial","kind":"callToAction","title":"Implement Special Day"}],"kind":"project","hierarchy":{"paths":[["doc:\/\/ObiletCalendar\/tutorials\/MeetObiletCalendar","doc:\/\/ObiletCalendar\/tutorials\/MeetObiletCalendar\/$volume","doc:\/\/ObiletCalendar\/tutorials\/MeetObiletCalendar\/Implement-Date-Selection"]],"modules":[{"projects":[{"reference":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/SetupEmptyProject","sections":[{"kind":"task","reference":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/SetupEmptyProject#Create-a-new-project-and-add-ObiletCalendar"}]},{"sections":[{"reference":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/CreateBaseView#Add-a-Base-view","kind":"task"},{"reference":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/CreateBaseView#Explore-a-Base-View-Range","kind":"task"}],"reference":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/CreateBaseView"},{"reference":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/UnderstandModifiers","sections":[{"reference":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/UnderstandModifiers#Day-Modifier","kind":"task"},{"reference":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/UnderstandModifiers#Include-Parameter","kind":"task"},{"reference":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/UnderstandModifiers#Month-Modifier","kind":"task"},{"reference":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/UnderstandModifiers#Modified-Day-+-Modified-Month","kind":"task"}]},{"reference":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/BaseCalendar","sections":[{"kind":"task","reference":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/BaseCalendar#OBBaseCalendar"}]}],"reference":"doc:\/\/ObiletCalendar\/tutorials\/MeetObiletCalendar\/Create-Demo-Project"},{"reference":"doc:\/\/ObiletCalendar\/tutorials\/MeetObiletCalendar\/Improve-User-Interface","projects":[{"sections":[{"reference":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/ImproveUserInterface#Add-Weekdays-View","kind":"task"}],"reference":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/ImproveUserInterface"},{"reference":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/ChangeDayView","sections":[{"reference":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/ChangeDayView#Hide-Some-Days","kind":"task"}]}]},{"projects":[{"reference":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/ImplementSingleDateSelection","sections":[{"reference":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/ImplementSingleDateSelection#Refactor-Code","kind":"task"},{"reference":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/ImplementSingleDateSelection#Implement-Single-Date","kind":"task"}]},{"sections":[{"kind":"task","reference":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/ImplementDoubleDateSelection#Implement-Double-Date-Selection"}],"reference":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/ImplementDoubleDateSelection"}],"reference":"doc:\/\/ObiletCalendar\/tutorials\/MeetObiletCalendar\/Implement-Date-Selection"},{"projects":[{"sections":[{"kind":"task","reference":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/ImplementYourCustomSpecialDay#Implement-Your-Custom-Special-Day"}],"reference":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/ImplementYourCustomSpecialDay"}],"reference":"doc:\/\/ObiletCalendar\/tutorials\/MeetObiletCalendar\/Implement-Special-Day-View"}],"reference":"doc:\/\/ObiletCalendar\/tutorials\/MeetObiletCalendar"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/ImplementDoubleDateSelection"},"references":{"doc://ObiletCalendar/tutorials/ObiletCalendar/BaseCalendar":{"abstract":[{"text":"You can more manage your calendar using ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ObiletCalendar\/documentation\/ObiletCalendar\/OBBaseCalendar"},{"text":".If you previous steps are enough for you, you can skip this section.","type":"text"}],"kind":"project","type":"topic","estimatedTime":"10min","title":"Understand BaseCalendar","role":"project","url":"\/tutorials\/obiletcalendar\/basecalendar","identifier":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/BaseCalendar"},"doc://ObiletCalendar/tutorials/ObiletCalendar/SetupEmptyProject#Create-a-new-project-and-add-ObiletCalendar":{"abstract":[{"type":"text","text":"Setup Empty Project"}],"url":"\/tutorials\/obiletcalendar\/setupemptyproject#Create-a-new-project-and-add-ObiletCalendar","title":"Create a new project and add ObiletCalendar","kind":"section","role":"pseudoSymbol","type":"section","identifier":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/SetupEmptyProject#Create-a-new-project-and-add-ObiletCalendar"},"doc://ObiletCalendar/tutorials/ObiletCalendar/ImplementDoubleDateSelection":{"url":"\/tutorials\/obiletcalendar\/implementdoubledateselection","role":"project","abstract":[],"estimatedTime":"10min","kind":"project","type":"topic","title":"Implement Double Date Selection","identifier":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/ImplementDoubleDateSelection"},"doc://ObiletCalendar/tutorials/ObiletCalendar/UnderstandModifiers#Day-Modifier":{"abstract":[],"url":"\/tutorials\/obiletcalendar\/understandmodifiers#Day-Modifier","title":"Day Modifier","kind":"section","role":"pseudoSymbol","type":"section","identifier":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/UnderstandModifiers#Day-Modifier"},"c3-t2-s1-s3.png":{"alt":null,"variants":[{"traits":["1x","light"],"url":"\/images\/c3-t2-s1-s3.png"}],"type":"image","identifier":"c3-t2-s1-s3.png"},"c3-t2-s1-s1.png":{"alt":null,"identifier":"c3-t2-s1-s1.png","variants":[{"traits":["1x","light"],"url":"\/images\/c3-t2-s1-s1.png"}],"type":"image"},"doc://ObiletCalendar/tutorials/ObiletCalendar/ImplementSingleDateSelection#Refactor-Code":{"url":"\/tutorials\/obiletcalendar\/implementsingledateselection#Refactor-Code","role":"pseudoSymbol","abstract":[{"type":"text","text":"Implement single date selection for users can select specific date."}],"identifier":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/ImplementSingleDateSelection#Refactor-Code","kind":"section","title":"Refactor Code","type":"section"},"c3-t2-s1-s8.png":{"alt":null,"variants":[{"traits":["1x","light"],"url":"\/images\/c3-t2-s1-s8.png"}],"type":"image","identifier":"c3-t2-s1-s8.png"},"doc://ObiletCalendar/tutorials/ObiletCalendar/ImplementSingleDateSelection#Implement-Single-Date":{"url":"\/tutorials\/obiletcalendar\/implementsingledateselection#Implement-Single-Date","type":"section","role":"pseudoSymbol","title":"Implement Single Date","identifier":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/ImplementSingleDateSelection#Implement-Single-Date","kind":"section","abstract":[{"type":"text","text":"Implement single date selection for users can select specific date."}]},"doc://ObiletCalendar/tutorials/MeetObiletCalendar/Create-Demo-Project":{"kind":"article","url":"\/tutorials\/meetobiletcalendar\/create-demo-project","abstract":[],"identifier":"doc:\/\/ObiletCalendar\/tutorials\/MeetObiletCalendar\/Create-Demo-Project","title":"Create Demo Project","role":"article","type":"topic"},"doc://ObiletCalendar/tutorials/ObiletCalendar/UnderstandModifiers#Modified-Day-+-Modified-Month":{"abstract":[],"kind":"section","type":"section","title":"Modified Day + Modified Month","role":"pseudoSymbol","url":"\/tutorials\/obiletcalendar\/understandmodifiers#Modified-Day-+-Modified-Month","identifier":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/UnderstandModifiers#Modified-Day-+-Modified-Month"},"doc://ObiletCalendar/tutorials/ObiletCalendar/ImplementYourCustomSpecialDay":{"type":"topic","estimatedTime":"7min","role":"project","abstract":[],"kind":"project","title":"Implement Special Day","url":"\/tutorials\/obiletcalendar\/implementyourcustomspecialday","identifier":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/ImplementYourCustomSpecialDay"},"doc://ObiletCalendar/tutorials/ObiletCalendar/UnderstandModifiers":{"type":"topic","abstract":[],"estimatedTime":"2min","kind":"project","url":"\/tutorials\/obiletcalendar\/understandmodifiers","title":"Understand Modifiers","identifier":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/UnderstandModifiers","role":"project"},"doc://ObiletCalendar/tutorials/ObiletCalendar/SetupEmptyProject":{"url":"\/tutorials\/obiletcalendar\/setupemptyproject","role":"project","abstract":[{"type":"text","text":"Setup Empty Project"}],"estimatedTime":"3min","identifier":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/SetupEmptyProject","kind":"project","title":"Setup Empty Project","type":"topic"},"doc://ObiletCalendar/tutorials/ObiletCalendar/ImplementSingleDateSelection":{"url":"\/tutorials\/obiletcalendar\/implementsingledateselection","role":"project","abstract":[{"type":"text","text":"Implement single date selection for users can select specific date."}],"estimatedTime":"15min","kind":"project","identifier":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/ImplementSingleDateSelection","title":"Implement Single Date Selection","type":"topic"},"doc://ObiletCalendar/tutorials/ObiletCalendar/ImproveUserInterface#Add-Weekdays-View":{"abstract":[{"type":"text","text":"Improve the user interface by adding weekdays and a header view."}],"kind":"section","type":"section","title":"Add Weekdays View","role":"pseudoSymbol","url":"\/tutorials\/obiletcalendar\/improveuserinterface#Add-Weekdays-View","identifier":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/ImproveUserInterface#Add-Weekdays-View"},"doc://ObiletCalendar/tutorials/MeetObiletCalendar":{"identifier":"doc:\/\/ObiletCalendar\/tutorials\/MeetObiletCalendar","abstract":[{"text":"Create easily your custom calendar","type":"text"}],"type":"topic","kind":"overview","title":"Meet ObiletCalendar","role":"overview","url":"\/tutorials\/meetobiletcalendar"},"doc://ObiletCalendar/tutorials/ObiletCalendar/ImplementDoubleDateSelection#Implement-Double-Date-Selection":{"url":"\/tutorials\/obiletcalendar\/implementdoubledateselection#Implement-Double-Date-Selection","role":"pseudoSymbol","abstract":[],"identifier":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/ImplementDoubleDateSelection#Implement-Double-Date-Selection","kind":"section","title":"Implement Double Date Selection","type":"section"},"c3-t2-s1-s2.png":{"alt":null,"identifier":"c3-t2-s1-s2.png","variants":[{"traits":["1x","light"],"url":"\/images\/c3-t2-s1-s2.png"}],"type":"image"},"c3-t2-s1-s7.png":{"alt":null,"variants":[{"traits":["1x","light"],"url":"\/images\/c3-t2-s1-s7.png"}],"type":"image","identifier":"c3-t2-s1-s7.png"},"c3-t2-s1-s4.png":{"alt":null,"identifier":"c3-t2-s1-s4.png","variants":[{"traits":["1x","light"],"url":"\/images\/c3-t2-s1-s4.png"}],"type":"image"},"c3-t2-s1-s5.png":{"alt":null,"variants":[{"traits":["1x","light"],"url":"\/images\/c3-t2-s1-s5.png"}],"type":"image","identifier":"c3-t2-s1-s5.png"},"c3-t2-s1-s6.png":{"alt":null,"identifier":"c3-t2-s1-s6.png","variants":[{"traits":["1x","light"],"url":"\/images\/c3-t2-s1-s6.png"}],"type":"image"},"c3-t2-s1-s4.swift":{"type":"file","content":["\/\/","\/\/  OBCalendarDemoDoubleSelection.swift","\/\/  OBCalendarDemoDoubleSelection","\/\/","\/\/  Created by Burak GÃ¼l on 19.11.2024.","\/\/","","import SwiftUI","import ObiletCalendar","","struct  OBCalendarDemoDoubleSelection: View {","    var calendar: Calendar = Calendar.current","    ","    var OBRed = Self.makeColor(red: 210, green: 59, blue: 56)","    var OBGray = Self.makeColor(red: 239, green: 239, blue: 239)","    ","    var selectedOBBackgroundColor: some View = Circle()","        .foregroundColor(","            Self.makeColor(","                red: 47,","                green: 91,","                blue: 141","            )","        )","    ","    @State var firstSelectedDate: Date?","    @State var secondSelectedDate: Date?","    ","    init(_ calendar: Calendar) {","        self.calendar = calendar","    }","    ","    var body: some View {","        VStack(spacing:0) {","            Spacer()","            headerView","                .fixedSize(horizontal: false, vertical: true)","                .padding()","                .background(OBRed)","                .foregroundColor(.white)","            ","            weekdaysView","                .padding(.vertical,8)","                .padding(.horizontal,16)","                .background(OBGray)","            calendarView","        }","    }","    ","    var calendarView: some View {","        OBCalendar(calendar:calendar)","            .dayModifier { baseView, model in","                modifyDayView(model: model.day) {","                    baseView","                }","                .onTapGesture {","                    selectDate(of: model.day)","                }","            }","    }","    ","    var weekdaysView: some View {","        let weekdays = getShortLocalizedWeekdays(for: calendar)","        return HStack {","            ForEach(weekdays.indices, id: \\.self) { index in","                Text(weekdays[index])","                    .frame(maxWidth: .infinity)","            }","        }","    }","    ","    var headerView: some View {","        HStack {","            Text(\"Departure\")","            Spacer()","            Image(systemName: \"xmark\")","        }","    }","    ","    func getShortLocalizedWeekdays(","        for calendar: Calendar","    ) -> [String] {","        let firstWeekday = calendar.firstWeekday","        let shortWeekdays = calendar.shortWeekdaySymbols","        let firstWeekdayIndex = firstWeekday - 1","        let reorderedShortWeekdays = Array(shortWeekdays[firstWeekdayIndex...])","        + Array(shortWeekdays[..<firstWeekdayIndex])","        return reorderedShortWeekdays","    }","    ","    private func contentBuilder<Content: View>(@ViewBuilder content: () -> Content) -> Content {","        content()","    }","    ","    func modifyDayView<Content:View>(model: CalendarModel.Day, @ViewBuilder content: () -> Content ) -> some View {","        contentBuilder {","            let day = model.day","            let today = calendar.startOfDay(for: Date())","            let dayDate = calendar.startOfDay(for: model.date)","            ","            ","            if model.isInRangeCurrentMonth {","                if (dayDate < today) {","                    content()","                        .foregroundColor(.gray)","                }else {","                    if model.date == firstSelectedDate || model.date == secondSelectedDate{","                        modifySelectedDayView(date: model.date, content: content)","                    }else {","                        content()","                            .foregroundColor(.black)","                    }","                }","            }else {","                Color.clear","            }","        }","    }","    ","    func modifySelectedDayView<Content: View>(date: Date, @ViewBuilder content: () -> Content) -> some View {","            contentBuilder {","                let modifiedContent = content()","                ","                modifiedContent","                    .background(selectedOBBackgroundColor)","                    .foregroundColor(.white)","            }","        }","    ","    func selectDate(of day: CalendarModel.Day) {","        let startOfToday = calendar.startOfDay(for: Date())","        let startOfDay = calendar.startOfDay(for: day.date)","        let date = day.date","        ","        if day.isInRangeCurrentMonth {","            if startOfDay >= startOfToday {","                if firstSelectedDate == nil  {","                    firstSelectedDate = date","                }else if secondSelectedDate == nil {","                    if let firstSelectedDate , date < firstSelectedDate {","                        secondSelectedDate = firstSelectedDate","                        self.firstSelectedDate = date","                    }else {","                        secondSelectedDate = date","                    }","                }else {","                    firstSelectedDate = date","                    secondSelectedDate = nil","                }","            }","        }","    }","}","","private extension OBCalendarDemoDoubleSelection {","    static func makeColor(red: Int, green: Int, blue: Int) -> Color {","        Color(","            red: Double(red) \/ 255,","            green: Double(green) \/ 255,","            blue: Double(blue) \/ 255","        )","    }","}","","#Preview {","    let calendar = Calendar.current","    return  OBCalendarDemoDoubleSelection(calendar)","}",""],"fileName":"OBCalendarDemoDoubleSelection.swift","fileType":"swift","syntax":"swift","identifier":"c3-t2-s1-s4.swift","highlights":[{"line":101},{"line":104},{"line":107},{"line":108},{"line":110}]},"doc://ObiletCalendar/tutorials/MeetObiletCalendar/Implement-Date-Selection":{"abstract":[],"url":"\/tutorials\/meetobiletcalendar\/implement-date-selection","kind":"article","title":"Implement Date Selection","role":"article","type":"topic","identifier":"doc:\/\/ObiletCalendar\/tutorials\/MeetObiletCalendar\/Implement-Date-Selection"},"doc://ObiletCalendar/tutorials/ObiletCalendar/CreateBaseView#Add-a-Base-view":{"url":"\/tutorials\/obiletcalendar\/createbaseview#Add-a-Base-view","abstract":[],"type":"section","role":"pseudoSymbol","identifier":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/CreateBaseView#Add-a-Base-view","kind":"section","title":"Add a Base view"},"doc://ObiletCalendar/tutorials/ObiletCalendar/UnderstandModifiers#Include-Parameter":{"url":"\/tutorials\/obiletcalendar\/understandmodifiers#Include-Parameter","kind":"section","identifier":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/UnderstandModifiers#Include-Parameter","type":"section","title":"Include Parameter","abstract":[],"role":"pseudoSymbol"},"c3-t2-s1-s8.swift":{"type":"file","content":["\/\/","\/\/  OBCalendarDemoDoubleSelection.swift","\/\/  OBCalendarDemoDoubleSelection","\/\/","\/\/  Created by Burak GÃ¼l on 19.11.2024.","\/\/","","import SwiftUI","import ObiletCalendar","","struct  OBCalendarDemoDoubleSelection: View {","    var calendar: Calendar = Calendar.current","    ","    var OBRed = Self.makeColor(red: 210, green: 59, blue: 56)","    var OBGray = Self.makeColor(red: 239, green: 239, blue: 239)","    ","    var selectedOBBackgroundColor: some View = Circle()","        .foregroundColor(","            Self.makeColor(","                red: 47,","                green: 91,","                blue: 141","            )","        )","    let selectedBetweenOBBackgroundColor = Self.makeColor(red: 185, green: 202, blue: 219)","    let secondSelectedOBBackgroundColor: some View = Circle()","        .foregroundColor(Self.makeColor(red: 47, green: 91, blue: 141))","        .overlay(","            Circle()","                .foregroundColor(.white)","                .padding(2)","        )","    ","    @State var firstSelectedDate: Date?","    @State var secondSelectedDate: Date?","    ","    init(_ calendar: Calendar) {","        self.calendar = calendar","    }","    ","    var body: some View {","        VStack(spacing:0) {","            Spacer()","            headerView","                .fixedSize(horizontal: false, vertical: true)","                .padding()","                .background(OBRed)","                .foregroundColor(.white)","            ","            weekdaysView","                .padding(.vertical,8)","                .padding(.horizontal,16)","                .background(OBGray)","            calendarView","        }","    }","    ","    var calendarView: some View {","        OBCalendar(calendar:calendar)","            .dayModifier { baseView, model in","                modifyDayView(model: model.day) {","                    baseView","                    ","                }","                .padding(.vertical,4)","                .onTapGesture {","                    selectDate(of: model.day)","                }","            }","    }","    ","    var weekdaysView: some View {","        let weekdays = getShortLocalizedWeekdays(for: calendar)","        return HStack {","            ForEach(weekdays.indices, id: \\.self) { index in","                Text(weekdays[index])","                    .frame(maxWidth: .infinity)","            }","        }","    }","    ","    var headerView: some View {","        HStack {","            Text(\"Departure\")","            Spacer()","            Image(systemName: \"xmark\")","        }","    }","    ","    func getShortLocalizedWeekdays(","        for calendar: Calendar","    ) -> [String] {","        let firstWeekday = calendar.firstWeekday","        let shortWeekdays = calendar.shortWeekdaySymbols","        let firstWeekdayIndex = firstWeekday - 1","        let reorderedShortWeekdays = Array(shortWeekdays[firstWeekdayIndex...])","        + Array(shortWeekdays[..<firstWeekdayIndex])","        return reorderedShortWeekdays","    }","    ","    private func contentBuilder<Content: View>(@ViewBuilder content: () -> Content) -> Content {","        content()","    }","    ","    func modifyDayView<Content:View>(model: CalendarModel.Day, @ViewBuilder content: () -> Content ) -> some View {","        contentBuilder {","            let day = model.day","            let today = calendar.startOfDay(for: Date())","            let dayDate = calendar.startOfDay(for: model.date)","            ","            ","            if model.isInRangeCurrentMonth {","                if (dayDate < today) {","                    content()","                        .foregroundColor(.gray)","                }else {","                    if model.date == firstSelectedDate || model.date == secondSelectedDate{","                        modifySelectedDayView(date: model.date, content: content)","                    }else {","                        modifyBetweenSelectedDateView(date: model.date, content: content)","                    }","                }","            }else {","                Color.clear","            }","        }","    }","    ","    func modifySelectedDayView<Content: View>(date: Date, @ViewBuilder content: () -> Content) -> some View {","        ","        contentBuilder {","            ","            ","            ","            let isFirstSelected = date == firstSelectedDate && secondSelectedDate != nil","            let isSecondSelected = date == secondSelectedDate && firstSelectedDate != nil","            let isSingleSelectedDate = firstSelectedDate == nil || secondSelectedDate == nil","            ","            let config: (corners: UIRectCorner, edges: Edge.Set) = isFirstSelected","            ? ([.topLeft, .bottomLeft], .leading)","            : isSecondSelected","            ? ([.topRight, .bottomRight], .trailing)","            : ([], .all)","            ","            let modifiedContent = content()","                .background(","                    contentBuilder{","                        if (isFirstSelected || isSingleSelectedDate) {","                            selectedOBBackgroundColor","                        }else {","                            secondSelectedOBBackgroundColor","                        }","                    }","                )","                .foregroundColor( isFirstSelected || isSingleSelectedDate ? .white : .black)","            ","            if isSingleSelectedDate {","                modifiedContent","                    .background(","                        selectedOBBackgroundColor","                    )","            }else {","                modifiedContent","                    .background(","                        selectedBetweenOBBackgroundColor","                            .clipShape(RoundedCornersShape(corners: config.corners, radius: 17.5))","                            .padding(config.edges)","                        ","                    )","            }","            ","        }","    }","    ","    func modifyBetweenSelectedDateView<Content: View>(date: Date, @ViewBuilder content: () -> Content) -> some View {","        contentBuilder {","            ","            if let firstSelectedDate, let secondSelectedDate, date > firstSelectedDate && date < secondSelectedDate {","                content()","                    .background(selectedBetweenOBBackgroundColor)","            }else {","                content()","            }","        }","    }","    ","    func selectDate(of day: CalendarModel.Day) {","        let startOfToday = calendar.startOfDay(for: Date())","        let startOfDay = calendar.startOfDay(for: day.date)","        let date = day.date","        ","        ","        if day.isInRangeCurrentMonth {","            if startOfDay >= startOfToday {","                if firstSelectedDate == nil  {","                    firstSelectedDate = date","                }else if secondSelectedDate == nil {","                    if let firstSelectedDate , date < firstSelectedDate {","                        secondSelectedDate = firstSelectedDate","                        self.firstSelectedDate = date","                    }else {","                        secondSelectedDate = date","                    }","                }else {","                    firstSelectedDate = date","                    secondSelectedDate = nil","                }","            }","        }","    }","}","","private struct RoundedCornersShape: Shape {","    var corners: UIRectCorner","    var radius: CGFloat","    ","    func path(in rect: CGRect) -> Path {","        let path = UIBezierPath(roundedRect: rect, byRoundingCorners: corners, cornerRadii: CGSize(width: radius, height: radius))","        return Path(path.cgPath)","    }","}","","private extension OBCalendarDemoDoubleSelection {","    static func makeColor(red: Int, green: Int, blue: Int) -> Color {","        Color(","            red: Double(red) \/ 255,","            green: Double(green) \/ 255,","            blue: Double(blue) \/ 255","        )","    }","}","","#Preview {","    let calendar = Calendar.current","    return  OBCalendarDemoDoubleSelection(calendar)","}",""],"fileName":"OBCalendarDemoDoubleSelection.swift","fileType":"swift","syntax":"swift","identifier":"c3-t2-s1-s8.swift","highlights":[{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":130},{"line":133},{"line":134},{"line":137},{"line":145},{"line":146},{"line":147},{"line":148},{"line":149},{"line":150},{"line":151},{"line":152},{"line":153},{"line":154},{"line":155},{"line":156},{"line":165},{"line":166},{"line":167}]},"doc://ObiletCalendar/tutorials/ObiletCalendar/ChangeDayView#Hide-Some-Days":{"url":"\/tutorials\/obiletcalendar\/changedayview#Hide-Some-Days","role":"pseudoSymbol","abstract":[],"kind":"section","type":"section","title":"Hide Some Days","identifier":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/ChangeDayView#Hide-Some-Days"},"doc://ObiletCalendar/tutorials/ObiletCalendar/UnderstandModifiers#Month-Modifier":{"identifier":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/UnderstandModifiers#Month-Modifier","kind":"section","abstract":[],"type":"section","role":"pseudoSymbol","url":"\/tutorials\/obiletcalendar\/understandmodifiers#Month-Modifier","title":"Month Modifier"},"c3-t2-s1-s1.swift":{"type":"file","content":["\/\/","\/\/  OBCalendarDemoDoubleSelection.swift","\/\/  OBCalendarDemoDoubleSelection","\/\/","\/\/  Created by Burak GÃ¼l on 19.11.2024.","\/\/","","import SwiftUI","import ObiletCalendar","","struct  OBCalendarDemoDoubleSelection: View {","    var calendar: Calendar = Calendar.current","    ","    var OBRed = Self.makeColor(red: 210, green: 59, blue: 56)","    var OBGray = Self.makeColor(red: 239, green: 239, blue: 239)","    ","    var selectedOBBackgroundColor: some View = Circle()","        .foregroundColor(","            Self.makeColor(","                red: 47,","                green: 91,","                blue: 141","            )","        )","    ","    @State var firstSelectedDate: Date?","    ","    init(_ calendar: Calendar) {","        self.calendar = calendar","    }","    ","    var body: some View {","        VStack(spacing:0) {","            Spacer()","            headerView","                .fixedSize(horizontal: false, vertical: true)","                .padding()","                .background(OBRed)","                .foregroundColor(.white)","            ","            weekdaysView","                .padding(.vertical,8)","                .padding(.horizontal,16)","                .background(OBGray)","            calendarView","        }","    }","    ","    var calendarView: some View {","        OBCalendar(calendar:calendar)","            .dayModifier { baseView, model in","                modifyDayView(model: model.day) {","                    baseView","                }","                .onTapGesture {","                    selectDate(of: model.day)","                }","            }","    }","    ","    var weekdaysView: some View {","        let weekdays = getShortLocalizedWeekdays(for: calendar)","        return HStack {","            ForEach(weekdays.indices, id: \\.self) { index in","                Text(weekdays[index])","                    .frame(maxWidth: .infinity)","            }","        }","    }","    ","    var headerView: some View {","        HStack {","            Text(\"Departure\")","            Spacer()","            Image(systemName: \"xmark\")","        }","    }","    ","    func getShortLocalizedWeekdays(","        for calendar: Calendar","    ) -> [String] {","        let firstWeekday = calendar.firstWeekday","        let shortWeekdays = calendar.shortWeekdaySymbols","        let firstWeekdayIndex = firstWeekday - 1","        let reorderedShortWeekdays = Array(shortWeekdays[firstWeekdayIndex...])","        + Array(shortWeekdays[..<firstWeekdayIndex])","        return reorderedShortWeekdays","    }","    ","    private func contentBuilder<Content: View>(@ViewBuilder content: () -> Content) -> Content {","        content()","    }","    ","    func modifyDayView<Content:View>(model: CalendarModel.Day, @ViewBuilder content: () -> Content ) -> some View {","        contentBuilder {","            let day = model.day","            let today = calendar.startOfDay(for: Date())","            let dayDate = calendar.startOfDay(for: model.date)","            let modifiedContent = content()","            ","            if model.isInRangeCurrentMonth {","                if (dayDate < today) {","                    modifiedContent","                        .foregroundColor(.gray)","                }else {","                    if firstSelectedDate == model.date {","                        modifiedContent","                            .foregroundColor(.white)","                            .background(selectedOBBackgroundColor)","                    }else {","                        modifiedContent","                            .foregroundColor(.black)","                    }","                }","            }else {","                Color.clear","            }","        }","    }","    ","    func selectDate(of day: CalendarModel.Day) {","        let startOfToday = calendar.startOfDay(for: Date())","        let startOfDay = calendar.startOfDay(for: day.date)","        ","        if day.isInRangeCurrentMonth {","            if startOfDay >= startOfToday {","                firstSelectedDate = day.date","            }","        }","        ","    }","}","","private extension OBCalendarDemoDoubleSelection {","    static func makeColor(red: Int, green: Int, blue: Int) -> Color {","        Color(","            red: Double(red) \/ 255,","            green: Double(green) \/ 255,","            blue: Double(blue) \/ 255","        )","    }","}","","#Preview {","    let calendar = Calendar.current","    return  OBCalendarDemoDoubleSelection(calendar)","}",""],"fileName":"OBCalendarDemoDoubleSelection.swift","fileType":"swift","syntax":"swift","identifier":"c3-t2-s1-s1.swift","highlights":[]},"doc://ObiletCalendar/tutorials/ObiletCalendar/BaseCalendar#OBBaseCalendar":{"kind":"section","role":"pseudoSymbol","type":"section","title":"OBBaseCalendar","url":"\/tutorials\/obiletcalendar\/basecalendar#OBBaseCalendar","identifier":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/BaseCalendar#OBBaseCalendar","abstract":[{"type":"text","text":"You can more manage your calendar using "},{"type":"reference","identifier":"doc:\/\/ObiletCalendar\/documentation\/ObiletCalendar\/OBBaseCalendar","isActive":true},{"text":".If you previous steps are enough for you, you can skip this section.","type":"text"}]},"c3-t2-s1-s2.swift":{"type":"file","content":["\/\/","\/\/  OBCalendarDemoDoubleSelection.swift","\/\/  OBCalendarDemoDoubleSelection","\/\/","\/\/  Created by Burak GÃ¼l on 19.11.2024.","\/\/","","import SwiftUI","import ObiletCalendar","","struct  OBCalendarDemoDoubleSelection: View {","    var calendar: Calendar = Calendar.current","    ","    var OBRed = Self.makeColor(red: 210, green: 59, blue: 56)","    var OBGray = Self.makeColor(red: 239, green: 239, blue: 239)","    ","    var selectedOBBackgroundColor: some View = Circle()","        .foregroundColor(","            Self.makeColor(","                red: 47,","                green: 91,","                blue: 141","            )","        )","    ","    @State var firstSelectedDate: Date?","    @State var secondSelectedDate: Date?","    ","    init(_ calendar: Calendar) {","        self.calendar = calendar","    }","    ","    var body: some View {","        VStack(spacing:0) {","            Spacer()","            headerView","                .fixedSize(horizontal: false, vertical: true)","                .padding()","                .background(OBRed)","                .foregroundColor(.white)","            ","            weekdaysView","                .padding(.vertical,8)","                .padding(.horizontal,16)","                .background(OBGray)","            calendarView","        }","    }","    ","    var calendarView: some View {","        OBCalendar(calendar:calendar)","            .dayModifier { baseView, model in","                modifyDayView(model: model.day) {","                    baseView","                }","                .onTapGesture {","                    selectDate(of: model.day)","                }","            }","    }","    ","    var weekdaysView: some View {","        let weekdays = getShortLocalizedWeekdays(for: calendar)","        return HStack {","            ForEach(weekdays.indices, id: \\.self) { index in","                Text(weekdays[index])","                    .frame(maxWidth: .infinity)","            }","        }","    }","    ","    var headerView: some View {","        HStack {","            Text(\"Departure\")","            Spacer()","            Image(systemName: \"xmark\")","        }","    }","    ","    func getShortLocalizedWeekdays(","        for calendar: Calendar","    ) -> [String] {","        let firstWeekday = calendar.firstWeekday","        let shortWeekdays = calendar.shortWeekdaySymbols","        let firstWeekdayIndex = firstWeekday - 1","        let reorderedShortWeekdays = Array(shortWeekdays[firstWeekdayIndex...])","        + Array(shortWeekdays[..<firstWeekdayIndex])","        return reorderedShortWeekdays","    }","    ","    private func contentBuilder<Content: View>(@ViewBuilder content: () -> Content) -> Content {","        content()","    }","    ","    func modifyDayView<Content:View>(model: CalendarModel.Day, @ViewBuilder content: () -> Content ) -> some View {","        contentBuilder {","            let day = model.day","            let today = calendar.startOfDay(for: Date())","            let dayDate = calendar.startOfDay(for: model.date)","            let modifiedContent = content()","            ","            if model.isInRangeCurrentMonth {","                if (dayDate < today) {","                    modifiedContent","                        .foregroundColor(.gray)","                }else {","                    if firstSelectedDate == model.date {","                        modifiedContent","                            .foregroundColor(.white)","                            .background(selectedOBBackgroundColor)","                    }else {","                        modifiedContent","                            .foregroundColor(.black)","                    }","                }","            }else {","                Color.clear","            }","        }","    }","    ","    func selectDate(of day: CalendarModel.Day) {","        let startOfToday = calendar.startOfDay(for: Date())","        let startOfDay = calendar.startOfDay(for: day.date)","        let date = day.date","        ","        if day.isInRangeCurrentMonth {","            if startOfDay >= startOfToday {","                if firstSelectedDate == nil  {","                    firstSelectedDate = date","                }else if secondSelectedDate == nil {","                    if let firstSelectedDate , date < firstSelectedDate {","                        secondSelectedDate = firstSelectedDate","                        self.firstSelectedDate = date","                    }else {","                        secondSelectedDate = date","                    }","                }else {","                    firstSelectedDate = date","                    secondSelectedDate = nil","                }","            }","        }","    }","}","","private extension OBCalendarDemoDoubleSelection {","    static func makeColor(red: Int, green: Int, blue: Int) -> Color {","        Color(","            red: Double(red) \/ 255,","            green: Double(green) \/ 255,","            blue: Double(blue) \/ 255","        )","    }","}","","#Preview {","    let calendar = Calendar.current","    return  OBCalendarDemoDoubleSelection(calendar)","}",""],"fileName":"OBCalendarDemoDoubleSelection.swift","fileType":"swift","syntax":"swift","identifier":"c3-t2-s1-s2.swift","highlights":[{"line":27},{"line":125},{"line":129},{"line":130},{"line":131},{"line":132},{"line":133},{"line":134},{"line":135},{"line":136},{"line":137},{"line":138},{"line":139},{"line":140},{"line":141}]},"doc://ObiletCalendar/documentation/ObiletCalendar/OBBaseCalendar":{"role":"symbol","type":"topic","kind":"symbol","identifier":"doc:\/\/ObiletCalendar\/documentation\/ObiletCalendar\/OBBaseCalendar","title":"OBBaseCalendar","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"OBBaseCalendar"}],"navigatorTitle":[{"text":"OBBaseCalendar","kind":"identifier"}],"url":"\/documentation\/obiletcalendar\/obbasecalendar","abstract":[]},"doc://ObiletCalendar/tutorials/ObiletCalendar/ImproveUserInterface":{"url":"\/tutorials\/obiletcalendar\/improveuserinterface","role":"project","abstract":[{"type":"text","text":"Improve the user interface by adding weekdays and a header view."}],"estimatedTime":"10min","identifier":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/ImproveUserInterface","kind":"project","title":"Improve User Interface","type":"topic"},"doc://ObiletCalendar/tutorials/ObiletCalendar/CreateBaseView":{"type":"topic","estimatedTime":"5min","role":"project","abstract":[],"kind":"project","title":"Base View","url":"\/tutorials\/obiletcalendar\/createbaseview","identifier":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/CreateBaseView"},"c3-t2-s1-s7.swift":{"type":"file","content":["\/\/","\/\/  OBCalendarDemoDoubleSelection.swift","\/\/  OBCalendarDemoDoubleSelection","\/\/","\/\/  Created by Burak GÃ¼l on 19.11.2024.","\/\/","","import SwiftUI","import ObiletCalendar","","struct  OBCalendarDemoDoubleSelection: View {","    var calendar: Calendar = Calendar.current","    ","    var OBRed = Self.makeColor(red: 210, green: 59, blue: 56)","    var OBGray = Self.makeColor(red: 239, green: 239, blue: 239)","    ","    var selectedOBBackgroundColor: some View = Circle()","        .foregroundColor(","            Self.makeColor(","                red: 47,","                green: 91,","                blue: 141","            )","        )","    let selectedBetweenOBBackgroundColor = Self.makeColor(red: 185, green: 202, blue: 219)","    ","    @State var firstSelectedDate: Date?","    @State var secondSelectedDate: Date?","    ","    init(_ calendar: Calendar) {","        self.calendar = calendar","    }","    ","    var body: some View {","        VStack(spacing:0) {","            Spacer()","            headerView","                .fixedSize(horizontal: false, vertical: true)","                .padding()","                .background(OBRed)","                .foregroundColor(.white)","            ","            weekdaysView","                .padding(.vertical,8)","                .padding(.horizontal,16)","                .background(OBGray)","            calendarView","        }","    }","    ","    var calendarView: some View {","        OBCalendar(calendar:calendar)","            .dayModifier { baseView, model in","                modifyDayView(model: model.day) {","                    baseView","                    ","                }","                .padding(.vertical,4)","                .onTapGesture {","                    selectDate(of: model.day)","                }","            }","    }","    ","    var weekdaysView: some View {","        let weekdays = getShortLocalizedWeekdays(for: calendar)","        return HStack {","            ForEach(weekdays.indices, id: \\.self) { index in","                Text(weekdays[index])","                    .frame(maxWidth: .infinity)","            }","        }","    }","    ","    var headerView: some View {","        HStack {","            Text(\"Departure\")","            Spacer()","            Image(systemName: \"xmark\")","        }","    }","    ","    func getShortLocalizedWeekdays(","        for calendar: Calendar","    ) -> [String] {","        let firstWeekday = calendar.firstWeekday","        let shortWeekdays = calendar.shortWeekdaySymbols","        let firstWeekdayIndex = firstWeekday - 1","        let reorderedShortWeekdays = Array(shortWeekdays[firstWeekdayIndex...])","        + Array(shortWeekdays[..<firstWeekdayIndex])","        return reorderedShortWeekdays","    }","    ","    private func contentBuilder<Content: View>(@ViewBuilder content: () -> Content) -> Content {","        content()","    }","    ","    func modifyDayView<Content:View>(model: CalendarModel.Day, @ViewBuilder content: () -> Content ) -> some View {","        contentBuilder {","            let day = model.day","            let today = calendar.startOfDay(for: Date())","            let dayDate = calendar.startOfDay(for: model.date)","            ","            ","            if model.isInRangeCurrentMonth {","                if (dayDate < today) {","                    content()","                        .foregroundColor(.gray)","                }else {","                    if model.date == firstSelectedDate || model.date == secondSelectedDate{","                        modifySelectedDayView(date: model.date, content: content)","                    }else {","                        modifyBetweenSelectedDateView(date: model.date, content: content)","                    }","                }","            }else {","                Color.clear","            }","        }","    }","    ","    func modifySelectedDayView<Content: View>(date: Date, @ViewBuilder content: () -> Content) -> some View {","        contentBuilder {","            \/\/            let modifiedContent = content()","            \/\/","            \/\/            modifiedContent","            \/\/                .background(selectedOBBackgroundColor)","            \/\/                .foregroundColor(.white)","            let modifiedContent = content()","                .background(","                    selectedOBBackgroundColor","                    ","                )","                .foregroundColor(.white)","            ","            let isFirstSelected = date == firstSelectedDate && secondSelectedDate != nil","            let isSecondSelected = date == secondSelectedDate && firstSelectedDate != nil","            let isSingleSelectedDate = firstSelectedDate == nil && secondSelectedDate == nil","            ","            let config: (corners: UIRectCorner, edges: Edge.Set) = isFirstSelected","            ? ([.topLeft, .bottomLeft], .leading)","            : isSecondSelected","            ? ([.topRight, .bottomRight], .trailing)","            : ([], .all)","            ","            if isSingleSelectedDate {","                modifiedContent","                    .background(","                        selectedOBBackgroundColor","                    )","            }else {","                modifiedContent","                    .background(","                       selectedBetweenOBBackgroundColor","                        .clipShape(RoundedCornersShape(corners: config.corners, radius: 17.5))","                        .padding(config.edges)","                        ","                    )","            }","            ","        }","    }","    ","    func modifyBetweenSelectedDateView<Content: View>(date: Date, @ViewBuilder content: () -> Content) -> some View {","        contentBuilder {","            ","            if let firstSelectedDate, let secondSelectedDate, date > firstSelectedDate && date < secondSelectedDate {","                content()","                    .background(selectedBetweenOBBackgroundColor)","            }else {","                content()","            }","        }","    }","    ","    func selectDate(of day: CalendarModel.Day) {","        let startOfToday = calendar.startOfDay(for: Date())","        let startOfDay = calendar.startOfDay(for: day.date)","        let date = day.date","        ","        ","        if day.isInRangeCurrentMonth {","            if startOfDay >= startOfToday {","                if firstSelectedDate == nil  {","                    firstSelectedDate = date","                }else if secondSelectedDate == nil {","                    if let firstSelectedDate , date < firstSelectedDate {","                        secondSelectedDate = firstSelectedDate","                        self.firstSelectedDate = date","                    }else {","                        secondSelectedDate = date","                    }","                }else {","                    firstSelectedDate = date","                    secondSelectedDate = nil","                }","            }","        }","    }","}","","private struct RoundedCornersShape: Shape {","    var corners: UIRectCorner","    var radius: CGFloat","    ","    func path(in rect: CGRect) -> Path {","        let path = UIBezierPath(roundedRect: rect, byRoundingCorners: corners, cornerRadii: CGSize(width: radius, height: radius))","        return Path(path.cgPath)","    }","}","","private extension OBCalendarDemoDoubleSelection {","    static func makeColor(red: Int, green: Int, blue: Int) -> Color {","        Color(","            red: Double(red) \/ 255,","            green: Double(green) \/ 255,","            blue: Double(blue) \/ 255","        )","    }","}","","#Preview {","    let calendar = Calendar.current","    return  OBCalendarDemoDoubleSelection(calendar)","}",""],"fileName":"OBCalendarDemoDoubleSelection.swift","fileType":"swift","syntax":"swift","identifier":"c3-t2-s1-s7.swift","highlights":[{"line":56},{"line":124},{"line":125},{"line":126},{"line":127},{"line":128},{"line":130},{"line":131},{"line":132},{"line":133},{"line":135},{"line":136},{"line":137},{"line":138},{"line":139},{"line":140},{"line":141},{"line":142},{"line":143},{"line":144},{"line":145},{"line":146},{"line":147},{"line":148},{"line":149},{"line":150},{"line":151},{"line":152},{"line":153},{"line":154},{"line":155},{"line":156},{"line":157},{"line":158},{"line":159},{"line":160},{"line":181},{"line":202},{"line":203},{"line":204},{"line":205},{"line":206},{"line":207},{"line":208},{"line":209},{"line":210},{"line":211}]},"c3-t2-s1-s5.swift":{"type":"file","content":["\/\/","\/\/  OBCalendarDemoDoubleSelection.swift","\/\/  OBCalendarDemoDoubleSelection","\/\/","\/\/  Created by Burak GÃ¼l on 19.11.2024.","\/\/","","import SwiftUI","import ObiletCalendar","","struct  OBCalendarDemoDoubleSelection: View {","    var calendar: Calendar = Calendar.current","    ","    var OBRed = Self.makeColor(red: 210, green: 59, blue: 56)","    var OBGray = Self.makeColor(red: 239, green: 239, blue: 239)","    ","    var selectedOBBackgroundColor: some View = Circle()","        .foregroundColor(","            Self.makeColor(","                red: 47,","                green: 91,","                blue: 141","            )","        )","    let selectedBetweenOBBackgroundColor = Self.makeColor(red: 185, green: 202, blue: 219)","    ","    @State var firstSelectedDate: Date?","    @State var secondSelectedDate: Date?","    ","    init(_ calendar: Calendar) {","        self.calendar = calendar","    }","    ","    var body: some View {","        VStack(spacing:0) {","            Spacer()","            headerView","                .fixedSize(horizontal: false, vertical: true)","                .padding()","                .background(OBRed)","                .foregroundColor(.white)","            ","            weekdaysView","                .padding(.vertical,8)","                .padding(.horizontal,16)","                .background(OBGray)","            calendarView","        }","    }","    ","    var calendarView: some View {","        OBCalendar(calendar:calendar)","            .dayModifier { baseView, model in","                modifyDayView(model: model.day) {","                    baseView","                }","                .onTapGesture {","                    selectDate(of: model.day)","                }","            }","    }","    ","    var weekdaysView: some View {","        let weekdays = getShortLocalizedWeekdays(for: calendar)","        return HStack {","            ForEach(weekdays.indices, id: \\.self) { index in","                Text(weekdays[index])","                    .frame(maxWidth: .infinity)","            }","        }","    }","    ","    var headerView: some View {","        HStack {","            Text(\"Departure\")","            Spacer()","            Image(systemName: \"xmark\")","        }","    }","    ","    func getShortLocalizedWeekdays(","        for calendar: Calendar","    ) -> [String] {","        let firstWeekday = calendar.firstWeekday","        let shortWeekdays = calendar.shortWeekdaySymbols","        let firstWeekdayIndex = firstWeekday - 1","        let reorderedShortWeekdays = Array(shortWeekdays[firstWeekdayIndex...])","        + Array(shortWeekdays[..<firstWeekdayIndex])","        return reorderedShortWeekdays","    }","    ","    private func contentBuilder<Content: View>(@ViewBuilder content: () -> Content) -> Content {","        content()","    }","    ","    func modifyDayView<Content:View>(model: CalendarModel.Day, @ViewBuilder content: () -> Content ) -> some View {","        contentBuilder {","            let day = model.day","            let today = calendar.startOfDay(for: Date())","            let dayDate = calendar.startOfDay(for: model.date)","            ","            ","            if model.isInRangeCurrentMonth {","                if (dayDate < today) {","                    content()","                        .foregroundColor(.gray)","                }else {","                    if model.date == firstSelectedDate || model.date == secondSelectedDate{","                        modifySelectedDayView(date: model.date, content: content)","                    }else {","                        content()","                            .foregroundColor(.black)","                    }","                }","            }else {","                Color.clear","            }","        }","    }","    ","    func modifySelectedDayView<Content: View>(date: Date, @ViewBuilder content: () -> Content) -> some View {","        contentBuilder {","            let modifiedContent = content()","            ","            modifiedContent","                .background(selectedOBBackgroundColor)","                .foregroundColor(.white)","        }","    }","    ","    func modifyBetweenSelectedDateView<Content: View>(date: Date, @ViewBuilder content: () -> Content) -> some View {","        contentBuilder {","            ","            if let firstSelectedDate, let secondSelectedDate, date > firstSelectedDate && date < secondSelectedDate {","                content()","                    .background(selectedBetweenOBBackgroundColor)","            }else {","                content()","            }","        }","    }","    ","    func selectDate(of day: CalendarModel.Day) {","        let startOfToday = calendar.startOfDay(for: Date())","        let startOfDay = calendar.startOfDay(for: day.date)","        let date = day.date","        ","        if day.isInRangeCurrentMonth {","            if startOfDay >= startOfToday {","                if firstSelectedDate == nil  {","                    firstSelectedDate = date","                }else if secondSelectedDate == nil {","                    if let firstSelectedDate , date < firstSelectedDate {","                        secondSelectedDate = firstSelectedDate","                        self.firstSelectedDate = date","                    }else {","                        secondSelectedDate = date","                    }","                }else {","                    firstSelectedDate = date","                    secondSelectedDate = nil","                }","            }","        }","    }","}","","private extension OBCalendarDemoDoubleSelection {","    static func makeColor(red: Int, green: Int, blue: Int) -> Color {","        Color(","            red: Double(red) \/ 255,","            green: Double(green) \/ 255,","            blue: Double(blue) \/ 255","        )","    }","}","","#Preview {","    let calendar = Calendar.current","    return  OBCalendarDemoDoubleSelection(calendar)","}",""],"fileName":"OBCalendarDemoDoubleSelection.swift","fileType":"swift","syntax":"swift","identifier":"c3-t2-s1-s5.swift","highlights":[{"line":25},{"line":122},{"line":123},{"line":124},{"line":125},{"line":126},{"line":127},{"line":128},{"line":129},{"line":130},{"line":131},{"line":132},{"line":133},{"line":134},{"line":135},{"line":136},{"line":137},{"line":138},{"line":141}]},"c3-t2-s1-s3.swift":{"type":"file","content":["\/\/","\/\/  OBCalendarDemoDoubleSelection.swift","\/\/  OBCalendarDemoDoubleSelection","\/\/","\/\/  Created by Burak GÃ¼l on 19.11.2024.","\/\/","","import SwiftUI","import ObiletCalendar","","struct  OBCalendarDemoDoubleSelection: View {","    var calendar: Calendar = Calendar.current","    ","    var OBRed = Self.makeColor(red: 210, green: 59, blue: 56)","    var OBGray = Self.makeColor(red: 239, green: 239, blue: 239)","    ","    var selectedOBBackgroundColor: some View = Circle()","        .foregroundColor(","            Self.makeColor(","                red: 47,","                green: 91,","                blue: 141","            )","        )","    ","    @State var firstSelectedDate: Date?","    @State var secondSelectedDate: Date?","    ","    init(_ calendar: Calendar) {","        self.calendar = calendar","    }","    ","    var body: some View {","        VStack(spacing:0) {","            Spacer()","            headerView","                .fixedSize(horizontal: false, vertical: true)","                .padding()","                .background(OBRed)","                .foregroundColor(.white)","            ","            weekdaysView","                .padding(.vertical,8)","                .padding(.horizontal,16)","                .background(OBGray)","            calendarView","        }","    }","    ","    var calendarView: some View {","        OBCalendar(calendar:calendar)","            .dayModifier { baseView, model in","                modifyDayView(model: model.day) {","                    baseView","                }","                .onTapGesture {","                    selectDate(of: model.day)","                }","            }","    }","    ","    var weekdaysView: some View {","        let weekdays = getShortLocalizedWeekdays(for: calendar)","        return HStack {","            ForEach(weekdays.indices, id: \\.self) { index in","                Text(weekdays[index])","                    .frame(maxWidth: .infinity)","            }","        }","    }","    ","    var headerView: some View {","        HStack {","            Text(\"Departure\")","            Spacer()","            Image(systemName: \"xmark\")","        }","    }","    ","    func getShortLocalizedWeekdays(","        for calendar: Calendar","    ) -> [String] {","        let firstWeekday = calendar.firstWeekday","        let shortWeekdays = calendar.shortWeekdaySymbols","        let firstWeekdayIndex = firstWeekday - 1","        let reorderedShortWeekdays = Array(shortWeekdays[firstWeekdayIndex...])","        + Array(shortWeekdays[..<firstWeekdayIndex])","        return reorderedShortWeekdays","    }","    ","    private func contentBuilder<Content: View>(@ViewBuilder content: () -> Content) -> Content {","        content()","    }","    ","    func modifyDayView<Content:View>(model: CalendarModel.Day, @ViewBuilder content: () -> Content ) -> some View {","        contentBuilder {","            let day = model.day","            let today = calendar.startOfDay(for: Date())","            let dayDate = calendar.startOfDay(for: model.date)","            let modifiedContent = content()","            ","            if model.isInRangeCurrentMonth {","                if (dayDate < today) {","                    modifiedContent","                        .foregroundColor(.gray)","                }else {","                    if firstSelectedDate == model.date {","                        modifiedContent","                            .foregroundColor(.white)","                            .background(selectedOBBackgroundColor)","                    }else {","                        modifiedContent","                            .foregroundColor(.black)","                    }","                }","            }else {","                Color.clear","            }","        }","    }","    ","    func modifySelectedDayView<Content: View>(date: Date, @ViewBuilder content: () -> Content) -> some View {","            contentBuilder {","                let modifiedContent = content()","                ","                modifiedContent","                    .background(selectedOBBackgroundColor)","                    .foregroundColor(.white)","            }","        }","    ","    func selectDate(of day: CalendarModel.Day) {","        let startOfToday = calendar.startOfDay(for: Date())","        let startOfDay = calendar.startOfDay(for: day.date)","        let date = day.date","        ","        if day.isInRangeCurrentMonth {","            if startOfDay >= startOfToday {","                if firstSelectedDate == nil  {","                    firstSelectedDate = date","                }else if secondSelectedDate == nil {","                    if let firstSelectedDate , date < firstSelectedDate {","                        secondSelectedDate = firstSelectedDate","                        self.firstSelectedDate = date","                    }else {","                        secondSelectedDate = date","                    }","                }else {","                    firstSelectedDate = date","                    secondSelectedDate = nil","                }","            }","        }","    }","}","","private extension OBCalendarDemoDoubleSelection {","    static func makeColor(red: Int, green: Int, blue: Int) -> Color {","        Color(","            red: Double(red) \/ 255,","            green: Double(green) \/ 255,","            blue: Double(blue) \/ 255","        )","    }","}","","#Preview {","    let calendar = Calendar.current","    return  OBCalendarDemoDoubleSelection(calendar)","}",""],"fileName":"OBCalendarDemoDoubleSelection.swift","fileType":"swift","syntax":"swift","identifier":"c3-t2-s1-s3.swift","highlights":[{"line":122},{"line":123},{"line":124},{"line":125},{"line":126},{"line":127},{"line":128},{"line":129},{"line":130},{"line":131}]},"doc://ObiletCalendar/tutorials/ObiletCalendar/CreateBaseView#Explore-a-Base-View-Range":{"abstract":[],"kind":"section","type":"section","title":"Explore a Base View Range","role":"pseudoSymbol","url":"\/tutorials\/obiletcalendar\/createbaseview#Explore-a-Base-View-Range","identifier":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/CreateBaseView#Explore-a-Base-View-Range"},"doc://ObiletCalendar/tutorials/ObiletCalendar/ImplementYourCustomSpecialDay#Implement-Your-Custom-Special-Day":{"type":"section","abstract":[],"kind":"section","url":"\/tutorials\/obiletcalendar\/implementyourcustomspecialday#Implement-Your-Custom-Special-Day","identifier":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/ImplementYourCustomSpecialDay#Implement-Your-Custom-Special-Day","title":"Implement Your Custom Special Day","role":"pseudoSymbol"},"c3-t2-s1-s6.swift":{"type":"file","content":["\/\/","\/\/  OBCalendarDemoDoubleSelection.swift","\/\/  OBCalendarDemoDoubleSelection","\/\/","\/\/  Created by Burak GÃ¼l on 19.11.2024.","\/\/","","import SwiftUI","import ObiletCalendar","","struct  OBCalendarDemoDoubleSelection: View {","    var calendar: Calendar = Calendar.current","    ","    var OBRed = Self.makeColor(red: 210, green: 59, blue: 56)","    var OBGray = Self.makeColor(red: 239, green: 239, blue: 239)","    ","    var selectedOBBackgroundColor: some View = Circle()","        .foregroundColor(","            Self.makeColor(","                red: 47,","                green: 91,","                blue: 141","            )","        )","    let selectedBetweenOBBackgroundColor = Self.makeColor(red: 185, green: 202, blue: 219)","    ","    @State var firstSelectedDate: Date?","    @State var secondSelectedDate: Date?","    ","    init(_ calendar: Calendar) {","        self.calendar = calendar","    }","    ","    var body: some View {","        VStack(spacing:0) {","            Spacer()","            headerView","                .fixedSize(horizontal: false, vertical: true)","                .padding()","                .background(OBRed)","                .foregroundColor(.white)","            ","            weekdaysView","                .padding(.vertical,8)","                .padding(.horizontal,16)","                .background(OBGray)","            calendarView","        }","    }","    ","    var calendarView: some View {","        OBCalendar(calendar:calendar)","            .dayModifier { baseView, model in","                modifyDayView(model: model.day) {","                    baseView","                        ","                }","                .padding(.vertical,4)","                .onTapGesture {","                    selectDate(of: model.day)","                }","            }","    }","    ","    var weekdaysView: some View {","        let weekdays = getShortLocalizedWeekdays(for: calendar)","        return HStack {","            ForEach(weekdays.indices, id: \\.self) { index in","                Text(weekdays[index])","                    .frame(maxWidth: .infinity)","            }","        }","    }","    ","    var headerView: some View {","        HStack {","            Text(\"Departure\")","            Spacer()","            Image(systemName: \"xmark\")","        }","    }","    ","    func getShortLocalizedWeekdays(","        for calendar: Calendar","    ) -> [String] {","        let firstWeekday = calendar.firstWeekday","        let shortWeekdays = calendar.shortWeekdaySymbols","        let firstWeekdayIndex = firstWeekday - 1","        let reorderedShortWeekdays = Array(shortWeekdays[firstWeekdayIndex...])","        + Array(shortWeekdays[..<firstWeekdayIndex])","        return reorderedShortWeekdays","    }","    ","    private func contentBuilder<Content: View>(@ViewBuilder content: () -> Content) -> Content {","        content()","    }","    ","    func modifyDayView<Content:View>(model: CalendarModel.Day, @ViewBuilder content: () -> Content ) -> some View {","        contentBuilder {","            let day = model.day","            let today = calendar.startOfDay(for: Date())","            let dayDate = calendar.startOfDay(for: model.date)","            ","            ","            if model.isInRangeCurrentMonth {","                if (dayDate < today) {","                    content()","                        .foregroundColor(.gray)","                }else {","                    if model.date == firstSelectedDate || model.date == secondSelectedDate{","                        modifySelectedDayView(date: model.date, content: content)","                    }else {","                        modifyBetweenSelectedDateView(date: model.date, content: content)","                    }","                }","            }else {","                Color.clear","            }","        }","    }","    ","    func modifySelectedDayView<Content: View>(date: Date, @ViewBuilder content: () -> Content) -> some View {","        contentBuilder {","            let modifiedContent = content()","            ","            modifiedContent","                .background(selectedOBBackgroundColor)","                .foregroundColor(.white)","        }","    }","    ","    func modifyBetweenSelectedDateView<Content: View>(date: Date, @ViewBuilder content: () -> Content) -> some View {","        contentBuilder {","            ","            if let firstSelectedDate, let secondSelectedDate, date > firstSelectedDate && date < secondSelectedDate {","                content()","                    .background(selectedBetweenOBBackgroundColor)","            }else {","                content()","            }","        }","    }","    ","    func selectDate(of day: CalendarModel.Day) {","        let startOfToday = calendar.startOfDay(for: Date())","        let startOfDay = calendar.startOfDay(for: day.date)","        let date = day.date","        ","        if day.isInRangeCurrentMonth {","            if startOfDay >= startOfToday {","                if firstSelectedDate == nil  {","                    firstSelectedDate = date","                }else if secondSelectedDate == nil {","                    if let firstSelectedDate , date < firstSelectedDate {","                        secondSelectedDate = firstSelectedDate","                        self.firstSelectedDate = date","                    }else {","                        secondSelectedDate = date","                    }","                }else {","                    firstSelectedDate = date","                    secondSelectedDate = nil","                }","            }","        }","    }","}","","private extension OBCalendarDemoDoubleSelection {","    static func makeColor(red: Int, green: Int, blue: Int) -> Color {","        Color(","            red: Double(red) \/ 255,","            green: Double(green) \/ 255,","            blue: Double(blue) \/ 255","        )","    }","}","","#Preview {","    let calendar = Calendar.current","    return  OBCalendarDemoDoubleSelection(calendar)","}",""],"fileName":"OBCalendarDemoDoubleSelection.swift","fileType":"swift","syntax":"swift","identifier":"c3-t2-s1-s6.swift","highlights":[{"line":56},{"line":58},{"line":113}]},"doc://ObiletCalendar/tutorials/ObiletCalendar/ChangeDayView":{"abstract":[],"kind":"project","type":"topic","estimatedTime":"1min","title":"Change Day View","role":"project","url":"\/tutorials\/obiletcalendar\/changedayview","identifier":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/ChangeDayView"},"doc://ObiletCalendar/tutorials/MeetObiletCalendar/Implement-Special-Day-View":{"abstract":[],"kind":"article","type":"topic","title":"Implement Special Day View","role":"article","url":"\/tutorials\/meetobiletcalendar\/implement-special-day-view","identifier":"doc:\/\/ObiletCalendar\/tutorials\/MeetObiletCalendar\/Implement-Special-Day-View"},"doc://ObiletCalendar/tutorials/MeetObiletCalendar/Improve-User-Interface":{"url":"\/tutorials\/meetobiletcalendar\/improve-user-interface","role":"article","abstract":[],"type":"topic","kind":"article","title":"Improve User Interface","identifier":"doc:\/\/ObiletCalendar\/tutorials\/MeetObiletCalendar\/Improve-User-Interface"}}}