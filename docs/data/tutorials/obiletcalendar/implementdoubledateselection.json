{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/tutorials\/obiletcalendar\/implementdoubledateselection"]}],"kind":"project","sections":[{"chapter":"Implement Date Selection","kind":"hero","content":[{"inlineContent":[{"type":"text","text":"Some Text"}],"type":"paragraph"}],"title":"Implement Double Date Selection","estimatedTimeInMinutes":10},{"kind":"tasks","tasks":[{"anchor":"Implement-Double-Date-Selection","contentSection":[{"mediaPosition":"trailing","kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"text":"Implement Double Date Selection.","type":"text"}]}]}],"stepsSection":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Look at latest state of previous tutorial. Copy it and paste to file that name is "},{"code":"OBCalendarDemoDoubleSelection.swift","type":"codeVoice"},{"text":".","type":"text"}]}],"code":"c3-t3-s1-step1.swift","caption":[],"type":"step","runtimePreview":"c3-t3-s1-step1.png","media":null},{"code":"c3-t3-s1-step2.swift","content":[{"type":"paragraph","inlineContent":[{"text":"Create a variable ","type":"text"},{"code":"secondSelectedDate","type":"codeVoice"},{"text":" to hold userâ€™s date selection and update ","type":"text"},{"type":"codeVoice","code":"selectDate(of)"},{"type":"text","text":" function to select double date."}]}],"caption":[],"runtimePreview":"c3-t3-s1-step2.png","media":null,"type":"step"},{"caption":[],"media":null,"runtimePreview":"c3-t3-s1-step3.png","code":"c3-t3-s1-step3.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create "},{"type":"codeVoice","code":"modifySelectedDayView(date:content:)"},{"text":"  to edit selected days (","type":"text"},{"type":"codeVoice","code":"firstSelectedDay"},{"text":" and ","type":"text"},{"code":"secondSelectedDay","type":"codeVoice"},{"text":").","type":"text"}]}],"type":"step"},{"code":"c3-t3-s1-step4.swift","runtimePreview":"c3-t3-s1-step4.png","type":"step","content":[{"inlineContent":[{"text":"Use ","type":"text"},{"type":"codeVoice","code":"modifySelectedDayView function"},{"type":"text","text":" in "},{"type":"codeVoice","code":"modifyDayView"},{"text":".","type":"text"}],"type":"paragraph"}],"caption":[],"media":null},{"code":"c3-t3-s1-step5.swift","runtimePreview":"c3-t3-s1-step5.png","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create "},{"type":"codeVoice","code":"modifyBetweenSelectedDateView(date:content:) function "},{"type":"text","text":" to edit selected between days."}]}],"caption":[],"type":"step","media":null},{"caption":[],"media":null,"code":"c3-t3-s1-step6.swift","runtimePreview":"c3-t3-s1-step6.png","type":"step","content":[{"inlineContent":[{"text":"Use ","type":"text"},{"code":"modifyBetweenSelectedDateView(date:content:) function ","type":"codeVoice"},{"text":" in ","type":"text"},{"type":"codeVoice","code":"modifyDayView"},{"type":"text","text":"."}],"type":"paragraph"}]},{"caption":[{"inlineContent":[{"text":"Create ","type":"text"},{"type":"codeVoice","code":"RoundedCornerShape"},{"type":"text","text":" structure to help."}],"type":"paragraph"}],"media":null,"type":"step","code":"c3-t3-s1-step7.swift","runtimePreview":"c3-t3-s1-step7.png","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Update "},{"code":"modifySelectedDayView","type":"codeVoice"},{"text":".","type":"text"}]}]}],"title":"Implement Double Date Selection"}]},{"kind":"callToAction","title":"Implement Special Day ","action":{"identifier":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/ImplementSpecialDay","overridingTitle":"Get started","isActive":true,"overridingTitleInlineContent":[{"type":"text","text":"Get started"}],"type":"reference"},"featuredEyebrow":"Tutorial","abstract":[{"type":"text","text":"Implement special day."}]}],"schemaVersion":{"minor":3,"patch":0,"major":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/ImplementDoubleDateSelection"},"hierarchy":{"paths":[["doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar","doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/$volume","doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/Implement-Date-Selection"]],"modules":[{"reference":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/Create-Demo-Project","projects":[{"reference":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/SetupEmptyProject","sections":[{"reference":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/SetupEmptyProject#Create-a-new-project-and-add-ObiletCalendar","kind":"task"}]},{"reference":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/CreateSkeletonView","sections":[{"reference":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/CreateSkeletonView#Add-a-customization-view","kind":"task"}]}]},{"reference":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/Improve-User-Interface","projects":[{"reference":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/ImproveUserInterface","sections":[{"kind":"task","reference":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/ImproveUserInterface#Add-Weekdays-View"}]},{"sections":[{"reference":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/ChangeDayView#Hide-Some-Days","kind":"task"}],"reference":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/ChangeDayView"}]},{"reference":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/Implement-Date-Selection","projects":[{"sections":[{"reference":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/ImplementSingleDateSelection#Implement-Single-Date-Selection","kind":"task"}],"reference":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/ImplementSingleDateSelection"},{"sections":[{"kind":"task","reference":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/RefactorImplementSingleDateSelection#Refactor"}],"reference":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/RefactorImplementSingleDateSelection"},{"reference":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/ImplementDoubleDateSelection","sections":[{"kind":"task","reference":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/ImplementDoubleDateSelection#Implement-Double-Date-Selection"}]}]},{"projects":[{"reference":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/ImplementSpecialDay","sections":[{"kind":"task","reference":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/ImplementSpecialDay#Implement-Your-Custom-Special-Day"}]}],"reference":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/Implement-Special-Day-View"}],"reference":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar"},"metadata":{"role":"project","category":"Tutorial","title":"Implement Double Date Selection","categoryPathComponent":"ObiletCalendar"},"references":{"c3-t3-s1-step7.swift":{"type":"file","identifier":"c3-t3-s1-step7.swift","highlights":[{"line":167},{"line":168},{"line":169},{"line":170},{"line":171},{"line":172},{"line":173},{"line":174},{"line":175},{"line":176},{"line":177},{"line":178},{"line":179},{"line":180},{"line":181},{"line":182},{"line":183},{"line":184},{"line":185},{"line":186},{"line":187},{"line":188},{"line":189},{"line":190},{"line":191},{"line":192},{"line":193},{"line":194},{"line":195},{"line":196},{"line":197},{"line":198},{"line":199},{"line":218},{"line":219},{"line":255},{"line":256},{"line":257},{"line":258},{"line":259},{"line":260},{"line":261},{"line":262},{"line":263},{"line":264},{"line":265},{"line":266}],"fileType":"swift","content":["\/\/","\/\/  OBCalendarDemoDoubleSelection.swift","\/\/  OBCalendarDemoDoubleSelection","\/\/","\/\/  Created by Burak on 14.10.2024.","\/\/","","import SwiftUI","import ObiletCalendar","","struct OBCalendarDemoDoubleSelection: View {","    let years: [CalendarModel.Year]","    let calendar: Calendar","    ","    @State var firstSelectedDate: Date?","    @State var secondSelectedDate: Date?","    ","    init(calendar: Calendar) {","        self.calendar = calendar","        self.years = Self.getYears(from: calendar)","    }","    ","    var body: some View {","        VStack {","            Spacer()","            headerView","                .fixedSize(horizontal: false, vertical: true)","                .padding(16)","                .background(Color.red)","                .foregroundColor(.white)","            ","            daysView","                .padding(8)","                .background(Color.white)","                .compositingGroup()","                .shadow(color: .gray, radius: 1, x: 0, y: 2)","            calendarView","                .padding(4)","        }","        ","    }","    var headerView: some View {","        HStack {","            Image(systemName: \"calendar\")","            Text(\"Departure Date\")","            Spacer()","            Divider()","                .frame(width: 1)","                .background(Color.white)","            Image(systemName: \"checkmark\")","            Text(\"APPLY\")","        }","        ","    }","    ","    var daysView: some View {","        let days = getShortLocalizedWeekdays(for: calendar)","        return HStack {","            ForEach(days.indices, id: \\.self) { index in","                Text(days[index])","                    .frame(maxWidth: .infinity)","            }","        }","        ","    }","    ","    var calendarView: some View {","        OBCalendar(years: years) { model, scrollProxy in","            \/\/ Day View goes here","            let day = model.day","            ","            modifyDayView(model: day) {","                Text(\"\\(day.day)\")","                    .frame(height: 35)","                    .frame(maxWidth: .infinity)","            }","            .padding(.vertical,4)","            .onTapGesture {","                selectDate(of: day)","            }","            ","        } monthContent: { model, scrollProxy, daysView in","            \/\/ Month View goes here","            VStack {","                HStack {","                    Text(getMonthName(from: model.month.month))","                    Text(formatYear(model.year.year))","                }","                Divider()","                daysView","            }","            .padding(4)","        } yearContent: { model, scrollProxy, monthsView in","            \/\/ Year View goes here","            monthsView","        }","    }","    ","    func formatYear(_ year: Int) -> String {","        let numberFormatter = NumberFormatter()","        numberFormatter.numberStyle = .none","        return numberFormatter.string(from: NSNumber(value: year)) ?? \"\"","    }","    ","    func makeDate(from month: Int) -> Date {","        let components = DateComponents(month: month)","        return calendar.date(from: components) ?? Date()","    }","    ","    func getMonthName(","        from month: Int","    ) -> String {","        let date = makeDate(from: month)","        let dateFormatter = DateFormatter()","        dateFormatter.locale = Locale(identifier: calendar.locale?.identifier ?? \"\")","        dateFormatter.dateFormat = \"MMMM\"","        return dateFormatter.string(from: date)","    }","    ","    func getShortLocalizedWeekdays(","        for calendar: Calendar","    ) -> [String] {","        let firstWeekday = calendar.firstWeekday","        ","        let shortWeekdays = calendar.shortWeekdaySymbols","        let firstWeekdayIndex = firstWeekday - 1","        ","        let reorderedShortWeekdays = Array(shortWeekdays[firstWeekdayIndex...])","        + Array(shortWeekdays[..<firstWeekdayIndex])","        ","        return reorderedShortWeekdays","    }","    ","    func selectDate(of day: CalendarModel.Day) {","        let startOfToday = calendar.startOfDay(for: Date())","        let startOfDay = calendar.startOfDay(for: day.date)","        let date = day.date","        ","        if case .insideRange(.currentMonth) = day.rangeType {","            if startOfDay >= startOfToday {","                if firstSelectedDate == nil  {","                    firstSelectedDate = date","                }else if secondSelectedDate == nil {","                    if let firstSelectedDate , date < firstSelectedDate {","                        secondSelectedDate = firstSelectedDate","                        self.firstSelectedDate = date","                    }else {","                        secondSelectedDate = date","                    }","                }else {","                    firstSelectedDate = date","                    secondSelectedDate = nil","                }","            }","        }","    }","    ","    ","    func modifySelectedDayView<Content: View>(date: Date, @ViewBuilder content: () -> Content) -> some View {","        contentBuilder {","            let modifiedContent = content()","                .background(","                    Circle()","                        .foregroundColor(.green)","                )","                .foregroundColor(.white)","            ","            let isFirstSelected = date == firstSelectedDate && secondSelectedDate != nil","            let isSecondSelected = date == secondSelectedDate && firstSelectedDate != nil","            let isSingleSelectedDate = firstSelectedDate == nil && secondSelectedDate == nil","            ","            let config: (corners: UIRectCorner, edges: Edge.Set) = isFirstSelected","            ? ([.topLeft, .bottomLeft], .leading)","            : isSecondSelected","            ? ([.topRight, .bottomRight], .trailing)","            : ([], .all)","            ","            if isSingleSelectedDate {","                modifiedContent","                    .background(","                        Circle()","                            .foregroundColor(","                                .green","                            )","                    )","            }else {","                modifiedContent","                    .background(","                        Color(","                            UIColor.systemGreen.withAlphaComponent(","                                0.25","                            )","                        )","                        .clipShape(RoundedCornersShape(corners: config.corners, radius: 17.5))","                        .padding(config.edges)","                        ","                    )","            }","","        }","    }","    ","    func modifyBetweenSelectedDateView<Content: View>(date: Date, @ViewBuilder content: () -> Content) -> some View {","        contentBuilder {","            ","            if let firstSelectedDate, let secondSelectedDate, date > firstSelectedDate && date < secondSelectedDate {","                content()","                    .background(","                        Color(","                            UIColor.systemGreen.withAlphaComponent(","                                0.25","                            )","                        )","                    )","            }else {","                content()","            }","            ","            ","        }","    }","    ","    func modifyDayView<Content: View>(","        model: CalendarModel.Day,","        @ViewBuilder content: () -> Content","    ) -> some View {","        contentBuilder {","            \/\/ some logic and view goes here","            let startOfToday = calendar.startOfDay(for: Date())","            let startOfDay = calendar.startOfDay(for: model.date)","            ","            ","            if case .insideRange(.currentMonth) = model.rangeType {","                if (startOfDay < startOfToday) {","                    content()","                        .foregroundColor(.gray)","                }else {","                    if  model.date == firstSelectedDate || model.date == secondSelectedDate {","                        modifySelectedDayView(date: model.date, content: content)","                    }else {","                        modifyBetweenSelectedDateView(date: model.date, content: content)","                    }","                }","            }else {","                Color.clear","            }","        }","    }","    ","    private func contentBuilder<Content: View>(@ViewBuilder content: () -> Content) -> Content {","        content()","    }","}","","","","private struct RoundedCornersShape: Shape {","    var corners: UIRectCorner","    var radius: CGFloat","    ","    func path(in rect: CGRect) -> Path {","        let path = UIBezierPath(roundedRect: rect, byRoundingCorners: corners, cornerRadii: CGSize(width: radius, height: radius))","        return Path(path.cgPath)","    }","}","","private extension OBCalendarDemoDoubleSelection {","    static func getYears(from calendar: Calendar) -> [CalendarModel.Year] {","        let elevenOctoberDateComponents = DateComponents(year: 2024, month: 10, day: 11)","        let elevenOctober = Calendar.current.date(from: elevenOctoberDateComponents)!","        ","        let startingDayOfMonth = Self.getStartDayOfMonth(from: elevenOctober, calendar: calendar)","        let nextYear = calendar.date(byAdding: .year, value: 1, to: startingDayOfMonth)!","        let endingDayOfMonth = Self.getEndDayOfMonth(from: nextYear, calendar: calendar)","        ","        return CalendarModelBuilder.defaultLayout(","            calendar: calendar,","            startingDate: startingDayOfMonth,","            endingDate: endingDayOfMonth","        )","    }","    ","    static func getStartDayOfMonth(from date: Date, calendar: Calendar) -> Date {","        let startDateComponents = DateComponents(","            year: calendar.component(.year, from: date),","            month: calendar.component(.month, from: date),","            day: 1","        )","        return calendar.date(from: startDateComponents) ?? Date()","    }","    ","    static func getEndDayOfMonth(from date: Date, calendar: Calendar) -> Date {","        ","        if let range = calendar.range(of: .day, in: .month, for: date) {","            let lastDay = range.count","            let endDateComponents = DateComponents(","                year: calendar.component(.year, from: date),","                month: calendar.component(.month, from: date),","                day: lastDay","            )","            return calendar.date(from: endDateComponents) ?? Date()","        }","        return Date()","    }","}","","#Preview {","    var calendar = Calendar.current","    calendar.locale = Locale(identifier: \"en_US\")","    return OBCalendarDemoDoubleSelection(calendar: calendar)","}"],"syntax":"swift","fileName":"OBCalendarDemoDoubleSelection.swift"},"doc://obcalendar.ObiletCalendar/tutorials/ObiletCalendar/ImplementSpecialDay":{"identifier":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/ImplementSpecialDay","role":"project","kind":"project","abstract":[{"text":"Implement special day.","type":"text"}],"type":"topic","url":"\/tutorials\/obiletcalendar\/implementspecialday","estimatedTime":"7min","title":"Implement Special Day "},"doc://obcalendar.ObiletCalendar/tutorials/ObiletCalendar/ImproveUserInterface":{"url":"\/tutorials\/obiletcalendar\/improveuserinterface","identifier":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/ImproveUserInterface","title":"Improve User Interface","abstract":[{"text":"Improve the user interface by adding weekdays and a header view.","type":"text"}],"role":"project","kind":"project","type":"topic","estimatedTime":"5min"},"doc://obcalendar.ObiletCalendar/tutorials/ObiletCalendar/CreateSkeletonView#Add-a-customization-view":{"role":"pseudoSymbol","type":"section","kind":"section","identifier":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/CreateSkeletonView#Add-a-customization-view","url":"\/tutorials\/obiletcalendar\/createskeletonview#Add-a-customization-view","title":"Add a customization view","abstract":[]},"doc://obcalendar.ObiletCalendar/tutorials/ObiletCalendar/ImproveUserInterface#Add-Weekdays-View":{"abstract":[{"text":"Improve the user interface by adding weekdays and a header view.","type":"text"}],"title":"Add Weekdays View","url":"\/tutorials\/obiletcalendar\/improveuserinterface#Add-Weekdays-View","role":"pseudoSymbol","type":"section","identifier":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/ImproveUserInterface#Add-Weekdays-View","kind":"section"},"doc://obcalendar.ObiletCalendar/documentation/ObiletCalendar/CalendarModel/Day/DateType":{"navigatorTitle":[{"text":"DateType","kind":"identifier"}],"type":"topic","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"DateType"}],"role":"symbol","identifier":"doc:\/\/obcalendar.ObiletCalendar\/documentation\/ObiletCalendar\/CalendarModel\/Day\/DateType","title":"CalendarModel.Day.DateType","kind":"symbol","abstract":[],"url":"\/documentation\/obiletcalendar\/calendarmodel\/day\/datetype"},"doc://obcalendar.ObiletCalendar/tutorials/ObiletCalendar":{"role":"overview","identifier":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar","type":"topic","url":"\/tutorials\/obiletcalendar","kind":"overview","title":"Meet ObiletCalendar","abstract":[{"text":"Create easily your custom calendar","type":"text"}]},"c3-t3-s1-step7.png":{"alt":"desc","variants":[{"traits":["1x","light"],"url":"\/images\/obcalendar.ObiletCalendar\/c3-t3-s1-step7.png"}],"type":"image","identifier":"c3-t3-s1-step7.png"},"doc://obcalendar.ObiletCalendar/tutorials/ObiletCalendar/ImplementDoubleDateSelection":{"identifier":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/ImplementDoubleDateSelection","url":"\/tutorials\/obiletcalendar\/implementdoubledateselection","estimatedTime":"10min","title":"Implement Double Date Selection","kind":"project","role":"project","type":"topic","abstract":[{"type":"text","text":"Some Text"}]},"doc://obcalendar.ObiletCalendar/tutorials/ObiletCalendar/ImplementSpecialDay#Implement-Your-Custom-Special-Day":{"kind":"section","role":"pseudoSymbol","abstract":[{"type":"text","text":"Implement special day."}],"identifier":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/ImplementSpecialDay#Implement-Your-Custom-Special-Day","type":"section","url":"\/tutorials\/obiletcalendar\/implementspecialday#Implement-Your-Custom-Special-Day","title":"Implement Your Custom Special Day"},"doc://obcalendar.ObiletCalendar/documentation/ObiletCalendar/CalendarModel/Day/RangeType-swift.enum":{"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RangeType","kind":"identifier"}],"abstract":[],"title":"CalendarModel.Day.RangeType","type":"topic","url":"\/documentation\/obiletcalendar\/calendarmodel\/day\/rangetype-swift.enum","navigatorTitle":[{"text":"RangeType","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/obcalendar.ObiletCalendar\/documentation\/ObiletCalendar\/CalendarModel\/Day\/RangeType-swift.enum","role":"symbol"},"c3-t3-s1-step1.swift":{"type":"file","identifier":"c3-t3-s1-step1.swift","highlights":[],"content":["\/\/","\/\/  OBCalendarDemoDoubleSelection.swift","\/\/  OBCalendarDemoDoubleSelection","\/\/","\/\/  Created by Burak on 14.10.2024.","\/\/","","import SwiftUI","import ObiletCalendar","","struct OBCalendarDemoDoubleSelection: View {","    let years: [CalendarModel.Year]","    let calendar: Calendar","    ","    @State var firstSelectedDate: Date?","    ","    init(calendar: Calendar) {","        self.calendar = calendar","        self.years = Self.getYears(from: calendar)","    }","    ","    var body: some View {","        VStack {","            Spacer()","            headerView","                .fixedSize(horizontal: false, vertical: true)","                .padding(16)","                .background(Color.red)","                .foregroundColor(.white)","            ","            daysView","                .padding(8)","                .background(Color.white)","                .compositingGroup()","                .shadow(color: .gray, radius: 1, x: 0, y: 2)","            calendarView","                .padding(4)","        }","        ","    }","    var headerView: some View {","        HStack {","            Image(systemName: \"calendar\")","            Text(\"Departure Date\")","            Spacer()","            Divider()","                .frame(width: 1)","                .background(Color.white)","            Image(systemName: \"checkmark\")","            Text(\"APPLY\")","        }","        ","    }","    ","    var daysView: some View {","        let days = getShortLocalizedWeekdays(for: calendar)","        return HStack {","            ForEach(days.indices, id: \\.self) { index in","                Text(days[index])","                    .frame(maxWidth: .infinity)","            }","        }","        ","    }","    ","    var calendarView: some View {","        OBCalendar(years: years) { model, scrollProxy in","            \/\/ Day View goes here","            let day = model.day","            ","            modifyDayView(model: day) {","                Text(\"\\(day.day)\")","                    .frame(width: 35, height: 35)","            }","            .onTapGesture {","                selectDate(of: day)","            }","            ","        } monthContent: { model, scrollProxy, daysView in","            \/\/ Month View goes here","            VStack {","                HStack {","                    Text(getMonthName(from: model.month.month))","                    Text(formatYear(model.year.year))","                }","                Divider()","                daysView","            }","            .padding(4)","        } yearContent: { model, scrollProxy, monthsView in","            \/\/ Year View goes here","            monthsView","        }","    }","    ","    func formatYear(_ year: Int) -> String {","        let numberFormatter = NumberFormatter()","        numberFormatter.numberStyle = .none","        return numberFormatter.string(from: NSNumber(value: year)) ?? \"\"","    }","    ","    func makeDate(from month: Int) -> Date {","        let components = DateComponents(month: month)","        return calendar.date(from: components) ?? Date()","    }","    ","    func getMonthName(","        from month: Int","    ) -> String {","        let date = makeDate(from: month)","        let dateFormatter = DateFormatter()","        dateFormatter.locale = Locale(identifier: calendar.locale?.identifier ?? \"\")","        dateFormatter.dateFormat = \"MMMM\"","        return dateFormatter.string(from: date)","    }","    ","    func getShortLocalizedWeekdays(","        for calendar: Calendar","    ) -> [String] {","        let firstWeekday = calendar.firstWeekday","        ","        let shortWeekdays = calendar.shortWeekdaySymbols","        let firstWeekdayIndex = firstWeekday - 1","        ","        let reorderedShortWeekdays = Array(shortWeekdays[firstWeekdayIndex...])","        + Array(shortWeekdays[..<firstWeekdayIndex])","        ","        return reorderedShortWeekdays","    }","    ","    func selectDate(of day: CalendarModel.Day) {","        let startOfToday = calendar.startOfDay(for: Date())","        let startOfDay = calendar.startOfDay(for: day.date)","        ","        if case .insideRange(.currentMonth) = day.rangeType {","            if startOfDay >= startOfToday {","                firstSelectedDate = day.date","            }","        }","    }","    ","    func modifyDayView<Content: View>(","        model: CalendarModel.Day,","        @ViewBuilder content: () -> Content","    ) -> some View {","        contentBuilder {","            \/\/ some logic and view goes here","            let startOfToday = calendar.startOfDay(for: Date())","            let startOfDay = calendar.startOfDay(for: model.date)","            let modifiedContent = content()","            ","            if case .insideRange(.currentMonth) = model.rangeType {","                if (startOfDay < startOfToday) {","                    modifiedContent","                        .foregroundColor(.gray)","                }else {","                    if firstSelectedDate == model.date {","                        modifiedContent","                            .foregroundColor(.white)","                            .background(","                                Circle().foregroundColor(.green)","                            )","                    }else {","                        modifiedContent","                            .foregroundColor(.black)","                    }","                    ","                }","            }else {","                Color.clear","            }","        }","    }","    ","    ","    private func contentBuilder<Content: View>(@ViewBuilder content: () -> Content) -> Content {","        content()","    }","    ","}","","private extension OBCalendarDemoDoubleSelection {","    static func getYears(from calendar: Calendar) -> [CalendarModel.Year] {","        let elevenOctoberDateComponents = DateComponents(year: 2024, month: 10, day: 11)","        let elevenOctober = Calendar.current.date(from: elevenOctoberDateComponents)!","        ","        let startingDayOfMonth = Self.getStartDayOfMonth(from: elevenOctober, calendar: calendar)","        let nextYear = calendar.date(byAdding: .year, value: 1, to: startingDayOfMonth)!","        let endingDayOfMonth = Self.getEndDayOfMonth(from: nextYear, calendar: calendar)","        ","        return CalendarModelBuilder.defaultLayout(","            calendar: calendar,","            startingDate: startingDayOfMonth,","            endingDate: endingDayOfMonth","        )","    }","    ","    static func getStartDayOfMonth(from date: Date, calendar: Calendar) -> Date {","        let startDateComponents = DateComponents(","            year: calendar.component(.year, from: date),","            month: calendar.component(.month, from: date),","            day: 1","        )","        return calendar.date(from: startDateComponents) ?? Date()","    }","    ","    static func getEndDayOfMonth(from date: Date, calendar: Calendar) -> Date {","        ","        if let range = calendar.range(of: .day, in: .month, for: date) {","            let lastDay = range.count","            let endDateComponents = DateComponents(","                year: calendar.component(.year, from: date),","                month: calendar.component(.month, from: date),","                day: lastDay","            )","            return calendar.date(from: endDateComponents) ?? Date()","        }","        return Date()","    }","}","","#Preview {","    var calendar = Calendar.current","    calendar.locale = Locale(identifier: \"en_US\")","    return OBCalendarDemoDoubleSelection(calendar: calendar)","}"],"fileType":"swift","syntax":"swift","fileName":"OBCalendarDemoDoubleSelection.swift"},"c3-t3-s1-step3.png":{"alt":"desc","variants":[{"traits":["1x","light"],"url":"\/images\/obcalendar.ObiletCalendar\/c3-t3-s1-step3.png"}],"type":"image","identifier":"c3-t3-s1-step3.png"},"c3-t3-s1-step5.png":{"alt":"desc","variants":[{"traits":["1x","light"],"url":"\/images\/obcalendar.ObiletCalendar\/c3-t3-s1-step5.png"}],"type":"image","identifier":"c3-t3-s1-step5.png"},"doc://obcalendar.ObiletCalendar/tutorials/ObiletCalendar/RefactorImplementSingleDateSelection":{"kind":"project","role":"project","abstract":[{"text":"In future , will shown double selection so refactor this code.","type":"text"}],"estimatedTime":"10min","identifier":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/RefactorImplementSingleDateSelection","type":"topic","url":"\/tutorials\/obiletcalendar\/refactorimplementsingledateselection","title":"Refactor Implement Single Date Selection"},"doc://obcalendar.ObiletCalendar/tutorials/ObiletCalendar/Implement-Date-Selection":{"kind":"article","role":"article","abstract":[],"identifier":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/Implement-Date-Selection","type":"topic","url":"\/tutorials\/obiletcalendar\/implement-date-selection","title":"Implement Date Selection"},"c3-t3-s1-step2.swift":{"syntax":"swift","content":["\/\/","\/\/  OBCalendarDemoDoubleSelection.swift","\/\/  OBCalendarDemoDoubleSelection","\/\/","\/\/  Created by Burak on 14.10.2024.","\/\/","","import SwiftUI","import ObiletCalendar","","struct OBCalendarDemoDoubleSelection: View {","    let years: [CalendarModel.Year]","    let calendar: Calendar","    ","    @State var firstSelectedDate: Date?","    @State var secondSelectedDate: Date?","    ","    init(calendar: Calendar) {","        self.calendar = calendar","        self.years = Self.getYears(from: calendar)","    }","    ","    var body: some View {","        VStack {","            Spacer()","            headerView","                .fixedSize(horizontal: false, vertical: true)","                .padding(16)","                .background(Color.red)","                .foregroundColor(.white)","            ","            daysView","                .padding(8)","                .background(Color.white)","                .compositingGroup()","                .shadow(color: .gray, radius: 1, x: 0, y: 2)","            calendarView","                .padding(4)","        }","        ","    }","    var headerView: some View {","        HStack {","            Image(systemName: \"calendar\")","            Text(\"Departure Date\")","            Spacer()","            Divider()","                .frame(width: 1)","                .background(Color.white)","            Image(systemName: \"checkmark\")","            Text(\"APPLY\")","        }","        ","    }","    ","    var daysView: some View {","        let days = getShortLocalizedWeekdays(for: calendar)","        return HStack {","            ForEach(days.indices, id: \\.self) { index in","                Text(days[index])","                    .frame(maxWidth: .infinity)","            }","        }","        ","    }","    ","    var calendarView: some View {","        OBCalendar(years: years) { model, scrollProxy in","            \/\/ Day View goes here","            let day = model.day","            ","            modifyDayView(model: day) {","                Text(\"\\(day.day)\")","                    .frame(width: 35, height: 35)","            }","            .onTapGesture {","                selectDate(of: day)","            }","            ","        } monthContent: { model, scrollProxy, daysView in","            \/\/ Month View goes here","            VStack {","                HStack {","                    Text(getMonthName(from: model.month.month))","                    Text(formatYear(model.year.year))","                }","                Divider()","                daysView","            }","            .padding(4)","        } yearContent: { model, scrollProxy, monthsView in","            \/\/ Year View goes here","            monthsView","        }","    }","    ","    func formatYear(_ year: Int) -> String {","        let numberFormatter = NumberFormatter()","        numberFormatter.numberStyle = .none","        return numberFormatter.string(from: NSNumber(value: year)) ?? \"\"","    }","    ","    func makeDate(from month: Int) -> Date {","        let components = DateComponents(month: month)","        return calendar.date(from: components) ?? Date()","    }","    ","    func getMonthName(","        from month: Int","    ) -> String {","        let date = makeDate(from: month)","        let dateFormatter = DateFormatter()","        dateFormatter.locale = Locale(identifier: calendar.locale?.identifier ?? \"\")","        dateFormatter.dateFormat = \"MMMM\"","        return dateFormatter.string(from: date)","    }","    ","    func getShortLocalizedWeekdays(","        for calendar: Calendar","    ) -> [String] {","        let firstWeekday = calendar.firstWeekday","        ","        let shortWeekdays = calendar.shortWeekdaySymbols","        let firstWeekdayIndex = firstWeekday - 1","        ","        let reorderedShortWeekdays = Array(shortWeekdays[firstWeekdayIndex...])","        + Array(shortWeekdays[..<firstWeekdayIndex])","        ","        return reorderedShortWeekdays","    }","    ","    func selectDate(of day: CalendarModel.Day) {","        let startOfToday = calendar.startOfDay(for: Date())","        let startOfDay = calendar.startOfDay(for: day.date)","        let date = day.date","        ","        if case .insideRange(.currentMonth) = day.rangeType {","            if startOfDay >= startOfToday {","                if firstSelectedDate == nil  {","                    firstSelectedDate = date","                }else if secondSelectedDate == nil {","                    if let firstSelectedDate , date < firstSelectedDate {","                        secondSelectedDate = firstSelectedDate","                        self.firstSelectedDate = date","                    }else {","                        secondSelectedDate = date","                    }","                }else {","                    firstSelectedDate = date","                    secondSelectedDate = nil","                }","            }","        }","    }","    ","    func modifyDayView<Content: View>(","        model: CalendarModel.Day,","        @ViewBuilder content: () -> Content","    ) -> some View {","        contentBuilder {","            \/\/ some logic and view goes here","            let startOfToday = calendar.startOfDay(for: Date())","            let startOfDay = calendar.startOfDay(for: model.date)","            let modifiedContent = content()","            ","            if case .insideRange(.currentMonth) = model.rangeType {","                if (startOfDay < startOfToday) {","                    modifiedContent","                        .foregroundColor(.gray)","                }else {","                    if firstSelectedDate == model.date {","                        modifiedContent","                            .foregroundColor(.white)","                            .background(","                                Circle().foregroundColor(.green)","                            )","                    }else {","                        modifiedContent","                            .foregroundColor(.black)","                    }","                    ","                }","            }else {","                Color.clear","            }","        }","    }","    ","    ","    private func contentBuilder<Content: View>(@ViewBuilder content: () -> Content) -> Content {","        content()","    }","    ","}","","private extension OBCalendarDemoDoubleSelection {","    static func getYears(from calendar: Calendar) -> [CalendarModel.Year] {","        let elevenOctoberDateComponents = DateComponents(year: 2024, month: 10, day: 11)","        let elevenOctober = Calendar.current.date(from: elevenOctoberDateComponents)!","        ","        let startingDayOfMonth = Self.getStartDayOfMonth(from: elevenOctober, calendar: calendar)","        let nextYear = calendar.date(byAdding: .year, value: 1, to: startingDayOfMonth)!","        let endingDayOfMonth = Self.getEndDayOfMonth(from: nextYear, calendar: calendar)","        ","        return CalendarModelBuilder.defaultLayout(","            calendar: calendar,","            startingDate: startingDayOfMonth,","            endingDate: endingDayOfMonth","        )","    }","    ","    static func getStartDayOfMonth(from date: Date, calendar: Calendar) -> Date {","        let startDateComponents = DateComponents(","            year: calendar.component(.year, from: date),","            month: calendar.component(.month, from: date),","            day: 1","        )","        return calendar.date(from: startDateComponents) ?? Date()","    }","    ","    static func getEndDayOfMonth(from date: Date, calendar: Calendar) -> Date {","        ","        if let range = calendar.range(of: .day, in: .month, for: date) {","            let lastDay = range.count","            let endDateComponents = DateComponents(","                year: calendar.component(.year, from: date),","                month: calendar.component(.month, from: date),","                day: lastDay","            )","            return calendar.date(from: endDateComponents) ?? Date()","        }","        return Date()","    }","}","","#Preview {","    var calendar = Calendar.current","    calendar.locale = Locale(identifier: \"en_US\")","    return OBCalendarDemoDoubleSelection(calendar: calendar)","}"],"identifier":"c3-t3-s1-step2.swift","fileType":"swift","type":"file","fileName":"OBCalendarDemoDoubleSelection.swift","highlights":[{"line":16},{"line":135},{"line":139},{"line":140},{"line":141},{"line":142},{"line":143},{"line":144},{"line":145},{"line":146},{"line":147},{"line":148},{"line":149},{"line":150},{"line":151}]},"doc://obcalendar.ObiletCalendar/tutorials/ObiletCalendar/Improve-User-Interface":{"role":"article","type":"topic","kind":"article","identifier":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/Improve-User-Interface","url":"\/tutorials\/obiletcalendar\/improve-user-interface","title":"Improve User Interface","abstract":[]},"c3-t3-s1-step2.png":{"alt":"desc","type":"image","identifier":"c3-t3-s1-step2.png","variants":[{"traits":["1x","light"],"url":"\/images\/obcalendar.ObiletCalendar\/c3-t3-s1-step2.png"}]},"doc://obcalendar.ObiletCalendar/tutorials/ObiletCalendar/SetupEmptyProject":{"kind":"project","role":"project","abstract":[],"estimatedTime":"3min","identifier":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/SetupEmptyProject","type":"topic","url":"\/tutorials\/obiletcalendar\/setupemptyproject","title":"Setup Empty Project"},"doc://obcalendar.ObiletCalendar/tutorials/ObiletCalendar/ChangeDayView":{"title":"Change Day View ","estimatedTime":"3min","kind":"project","url":"\/tutorials\/obiletcalendar\/changedayview","type":"topic","identifier":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/ChangeDayView","role":"project","abstract":[{"text":"Change view of ","type":"text"},{"code":"day","type":"codeVoice"},{"text":" by ","type":"text"},{"type":"reference","overridingTitle":"Date Type","overridingTitleInlineContent":[{"text":"Date Type","type":"text"}],"identifier":"doc:\/\/obcalendar.ObiletCalendar\/documentation\/ObiletCalendar\/CalendarModel\/Day\/DateType","isActive":true},{"text":" and ","type":"text"},{"identifier":"doc:\/\/obcalendar.ObiletCalendar\/documentation\/ObiletCalendar\/CalendarModel\/Day\/RangeType-swift.enum","overridingTitle":"Range Type","isActive":true,"overridingTitleInlineContent":[{"text":"Range Type","type":"text"}],"type":"reference"}]},"c3-t3-s1-step5.swift":{"highlights":[{"line":170},{"line":171},{"line":172},{"line":173},{"line":174},{"line":175},{"line":176},{"line":177},{"line":178},{"line":179},{"line":180},{"line":181},{"line":182},{"line":183},{"line":184},{"line":185},{"line":186},{"line":187}],"fileName":"OBCalendarDemoDoubleSelection.swift","identifier":"c3-t3-s1-step5.swift","type":"file","fileType":"swift","syntax":"swift","content":["\/\/","\/\/  OBCalendarDemoDoubleSelection.swift","\/\/  OBCalendarDemoDoubleSelection","\/\/","\/\/  Created by Burak on 14.10.2024.","\/\/","","import SwiftUI","import ObiletCalendar","","struct OBCalendarDemoDoubleSelection: View {","    let years: [CalendarModel.Year]","    let calendar: Calendar","    ","    @State var firstSelectedDate: Date?","    @State var secondSelectedDate: Date?","    ","    init(calendar: Calendar) {","        self.calendar = calendar","        self.years = Self.getYears(from: calendar)","    }","    ","    var body: some View {","        VStack {","            Spacer()","            headerView","                .fixedSize(horizontal: false, vertical: true)","                .padding(16)","                .background(Color.red)","                .foregroundColor(.white)","            ","            daysView","                .padding(8)","                .background(Color.white)","                .compositingGroup()","                .shadow(color: .gray, radius: 1, x: 0, y: 2)","            calendarView","                .padding(4)","        }","        ","    }","    var headerView: some View {","        HStack {","            Image(systemName: \"calendar\")","            Text(\"Departure Date\")","            Spacer()","            Divider()","                .frame(width: 1)","                .background(Color.white)","            Image(systemName: \"checkmark\")","            Text(\"APPLY\")","        }","        ","    }","    ","    var daysView: some View {","        let days = getShortLocalizedWeekdays(for: calendar)","        return HStack {","            ForEach(days.indices, id: \\.self) { index in","                Text(days[index])","                    .frame(maxWidth: .infinity)","            }","        }","        ","    }","    ","    var calendarView: some View {","        OBCalendar(years: years) { model, scrollProxy in","            \/\/ Day View goes here","            let day = model.day","            ","            modifyDayView(model: day) {","                Text(\"\\(day.day)\")","                    .frame(width: 35, height: 35)","            }","            .onTapGesture {","                selectDate(of: day)","            }","            ","        } monthContent: { model, scrollProxy, daysView in","            \/\/ Month View goes here","            VStack {","                HStack {","                    Text(getMonthName(from: model.month.month))","                    Text(formatYear(model.year.year))","                }","                Divider()","                daysView","            }","            .padding(4)","        } yearContent: { model, scrollProxy, monthsView in","            \/\/ Year View goes here","            monthsView","        }","    }","    ","    func formatYear(_ year: Int) -> String {","        let numberFormatter = NumberFormatter()","        numberFormatter.numberStyle = .none","        return numberFormatter.string(from: NSNumber(value: year)) ?? \"\"","    }","    ","    func makeDate(from month: Int) -> Date {","        let components = DateComponents(month: month)","        return calendar.date(from: components) ?? Date()","    }","    ","    func getMonthName(","        from month: Int","    ) -> String {","        let date = makeDate(from: month)","        let dateFormatter = DateFormatter()","        dateFormatter.locale = Locale(identifier: calendar.locale?.identifier ?? \"\")","        dateFormatter.dateFormat = \"MMMM\"","        return dateFormatter.string(from: date)","    }","    ","    func getShortLocalizedWeekdays(","        for calendar: Calendar","    ) -> [String] {","        let firstWeekday = calendar.firstWeekday","        ","        let shortWeekdays = calendar.shortWeekdaySymbols","        let firstWeekdayIndex = firstWeekday - 1","        ","        let reorderedShortWeekdays = Array(shortWeekdays[firstWeekdayIndex...])","        + Array(shortWeekdays[..<firstWeekdayIndex])","        ","        return reorderedShortWeekdays","    }","    ","    func selectDate(of day: CalendarModel.Day) {","        let startOfToday = calendar.startOfDay(for: Date())","        let startOfDay = calendar.startOfDay(for: day.date)","        let date = day.date","        ","        if case .insideRange(.currentMonth) = day.rangeType {","            if startOfDay >= startOfToday {","                if firstSelectedDate == nil  {","                    firstSelectedDate = date","                }else if secondSelectedDate == nil {","                    if let firstSelectedDate , date < firstSelectedDate {","                        secondSelectedDate = firstSelectedDate","                        self.firstSelectedDate = date","                    }else {","                        secondSelectedDate = date","                    }","                }else {","                    firstSelectedDate = date","                    secondSelectedDate = nil","                }","            }","        }","    }","    ","    ","    func modifySelectedDayView<Content: View>(date: Date, @ViewBuilder content: () -> Content) -> some View {","        contentBuilder {","            let modifiedContent = content()","            ","            modifiedContent","                .background(","                    Circle()","                        .foregroundColor(.green)","                )","                .foregroundColor(.white)","        }","    }","    ","    func modifyBetweenSelectedDateView<Content: View>(date: Date, @ViewBuilder content: () -> Content) -> some View {","        contentBuilder {","            ","            if let firstSelectedDate, let secondSelectedDate, date > firstSelectedDate && date < secondSelectedDate {","                content()","                    .background(","                        Color(","                            UIColor.systemGreen.withAlphaComponent(","                                0.25","                            )","                        )","                    )","            }else {","                content()","            }","        }","    }","    ","    func modifyDayView<Content: View>(","        model: CalendarModel.Day,","        @ViewBuilder content: () -> Content","    ) -> some View {","        contentBuilder {","            \/\/ some logic and view goes here","            let startOfToday = calendar.startOfDay(for: Date())","            let startOfDay = calendar.startOfDay(for: model.date)","            ","            ","            if case .insideRange(.currentMonth) = model.rangeType {","                if (startOfDay < startOfToday) {","                    content()","                        .foregroundColor(.gray)","                }else {","                    if  model.date == firstSelectedDate || model.date == secondSelectedDate {","                        modifySelectedDayView(date: model.date, content: content)","                    }else {","                        content()","                            .foregroundColor(.black)","                    }","                }","            }else {","                Color.clear","            }","        }","    }","    ","    private func contentBuilder<Content: View>(@ViewBuilder content: () -> Content) -> Content {","        content()","    }","}","","private extension OBCalendarDemoDoubleSelection {","    static func getYears(from calendar: Calendar) -> [CalendarModel.Year] {","        let elevenOctoberDateComponents = DateComponents(year: 2024, month: 10, day: 11)","        let elevenOctober = Calendar.current.date(from: elevenOctoberDateComponents)!","        ","        let startingDayOfMonth = Self.getStartDayOfMonth(from: elevenOctober, calendar: calendar)","        let nextYear = calendar.date(byAdding: .year, value: 1, to: startingDayOfMonth)!","        let endingDayOfMonth = Self.getEndDayOfMonth(from: nextYear, calendar: calendar)","        ","        return CalendarModelBuilder.defaultLayout(","            calendar: calendar,","            startingDate: startingDayOfMonth,","            endingDate: endingDayOfMonth","        )","    }","    ","    static func getStartDayOfMonth(from date: Date, calendar: Calendar) -> Date {","        let startDateComponents = DateComponents(","            year: calendar.component(.year, from: date),","            month: calendar.component(.month, from: date),","            day: 1","        )","        return calendar.date(from: startDateComponents) ?? Date()","    }","    ","    static func getEndDayOfMonth(from date: Date, calendar: Calendar) -> Date {","        ","        if let range = calendar.range(of: .day, in: .month, for: date) {","            let lastDay = range.count","            let endDateComponents = DateComponents(","                year: calendar.component(.year, from: date),","                month: calendar.component(.month, from: date),","                day: lastDay","            )","            return calendar.date(from: endDateComponents) ?? Date()","        }","        return Date()","    }","}","","#Preview {","    var calendar = Calendar.current","    calendar.locale = Locale(identifier: \"en_US\")","    return OBCalendarDemoDoubleSelection(calendar: calendar)","}"]},"c3-t3-s1-step6.swift":{"syntax":"swift","identifier":"c3-t3-s1-step6.swift","highlights":[{"line":74},{"line":75},{"line":77},{"line":208}],"type":"file","content":["\/\/","\/\/  OBCalendarDemoDoubleSelection.swift","\/\/  OBCalendarDemoDoubleSelection","\/\/","\/\/  Created by Burak on 14.10.2024.","\/\/","","import SwiftUI","import ObiletCalendar","","struct OBCalendarDemoDoubleSelection: View {","    let years: [CalendarModel.Year]","    let calendar: Calendar","    ","    @State var firstSelectedDate: Date?","    @State var secondSelectedDate: Date?","    ","    init(calendar: Calendar) {","        self.calendar = calendar","        self.years = Self.getYears(from: calendar)","    }","    ","    var body: some View {","        VStack {","            Spacer()","            headerView","                .fixedSize(horizontal: false, vertical: true)","                .padding(16)","                .background(Color.red)","                .foregroundColor(.white)","            ","            daysView","                .padding(8)","                .background(Color.white)","                .compositingGroup()","                .shadow(color: .gray, radius: 1, x: 0, y: 2)","            calendarView","                .padding(4)","        }","        ","    }","    var headerView: some View {","        HStack {","            Image(systemName: \"calendar\")","            Text(\"Departure Date\")","            Spacer()","            Divider()","                .frame(width: 1)","                .background(Color.white)","            Image(systemName: \"checkmark\")","            Text(\"APPLY\")","        }","        ","    }","    ","    var daysView: some View {","        let days = getShortLocalizedWeekdays(for: calendar)","        return HStack {","            ForEach(days.indices, id: \\.self) { index in","                Text(days[index])","                    .frame(maxWidth: .infinity)","            }","        }","        ","    }","    ","    var calendarView: some View {","        OBCalendar(years: years) { model, scrollProxy in","            \/\/ Day View goes here","            let day = model.day","            ","            modifyDayView(model: day) {","                Text(\"\\(day.day)\")","                    .frame(height: 35)","                    .frame(maxWidth: .infinity)","            }","            .padding(.vertical,4)","            .onTapGesture {","                selectDate(of: day)","            }","            ","        } monthContent: { model, scrollProxy, daysView in","            \/\/ Month View goes here","            VStack {","                HStack {","                    Text(getMonthName(from: model.month.month))","                    Text(formatYear(model.year.year))","                }","                Divider()","                daysView","            }","            .padding(4)","        } yearContent: { model, scrollProxy, monthsView in","            \/\/ Year View goes here","            monthsView","        }","    }","    ","    func formatYear(_ year: Int) -> String {","        let numberFormatter = NumberFormatter()","        numberFormatter.numberStyle = .none","        return numberFormatter.string(from: NSNumber(value: year)) ?? \"\"","    }","    ","    func makeDate(from month: Int) -> Date {","        let components = DateComponents(month: month)","        return calendar.date(from: components) ?? Date()","    }","    ","    func getMonthName(","        from month: Int","    ) -> String {","        let date = makeDate(from: month)","        let dateFormatter = DateFormatter()","        dateFormatter.locale = Locale(identifier: calendar.locale?.identifier ?? \"\")","        dateFormatter.dateFormat = \"MMMM\"","        return dateFormatter.string(from: date)","    }","    ","    func getShortLocalizedWeekdays(","        for calendar: Calendar","    ) -> [String] {","        let firstWeekday = calendar.firstWeekday","        ","        let shortWeekdays = calendar.shortWeekdaySymbols","        let firstWeekdayIndex = firstWeekday - 1","        ","        let reorderedShortWeekdays = Array(shortWeekdays[firstWeekdayIndex...])","        + Array(shortWeekdays[..<firstWeekdayIndex])","        ","        return reorderedShortWeekdays","    }","    ","    func selectDate(of day: CalendarModel.Day) {","        let startOfToday = calendar.startOfDay(for: Date())","        let startOfDay = calendar.startOfDay(for: day.date)","        let date = day.date","        ","        if case .insideRange(.currentMonth) = day.rangeType {","            if startOfDay >= startOfToday {","                if firstSelectedDate == nil  {","                    firstSelectedDate = date","                }else if secondSelectedDate == nil {","                    if let firstSelectedDate , date < firstSelectedDate {","                        secondSelectedDate = firstSelectedDate","                        self.firstSelectedDate = date","                    }else {","                        secondSelectedDate = date","                    }","                }else {","                    firstSelectedDate = date","                    secondSelectedDate = nil","                }","            }","        }","    }","    ","    ","    func modifySelectedDayView<Content: View>(date: Date, @ViewBuilder content: () -> Content) -> some View {","        contentBuilder {","            let modifiedContent = content()","            ","            modifiedContent","                .background(","                    Circle()","                        .foregroundColor(.green)","                )","                .foregroundColor(.white)","        }","    }","    ","    func modifyBetweenSelectedDateView<Content: View>(date: Date, @ViewBuilder content: () -> Content) -> some View {","        contentBuilder {","            ","            if let firstSelectedDate, let secondSelectedDate, date > firstSelectedDate && date < secondSelectedDate {","                content()","                    .background(","                        Color(","                            UIColor.systemGreen.withAlphaComponent(","                                0.25","                            )","                        )","                    )","            }else {","                content()","            }","        }","    }","    ","    func modifyDayView<Content: View>(","        model: CalendarModel.Day,","        @ViewBuilder content: () -> Content","    ) -> some View {","        contentBuilder {","            \/\/ some logic and view goes here","            let startOfToday = calendar.startOfDay(for: Date())","            let startOfDay = calendar.startOfDay(for: model.date)","            ","            ","            if case .insideRange(.currentMonth) = model.rangeType {","                if (startOfDay < startOfToday) {","                    content()","                        .foregroundColor(.gray)","                }else {","                    if  model.date == firstSelectedDate || model.date == secondSelectedDate {","                        modifySelectedDayView(date: model.date, content: content)","                    }else {","                        modifyBetweenSelectedDateView(date: model.date, content: content)","                    }","                }","            }else {","                Color.clear","            }","        }","    }","    ","    private func contentBuilder<Content: View>(@ViewBuilder content: () -> Content) -> Content {","        content()","    }","}","","private extension OBCalendarDemoDoubleSelection {","    static func getYears(from calendar: Calendar) -> [CalendarModel.Year] {","        let elevenOctoberDateComponents = DateComponents(year: 2024, month: 10, day: 11)","        let elevenOctober = Calendar.current.date(from: elevenOctoberDateComponents)!","        ","        let startingDayOfMonth = Self.getStartDayOfMonth(from: elevenOctober, calendar: calendar)","        let nextYear = calendar.date(byAdding: .year, value: 1, to: startingDayOfMonth)!","        let endingDayOfMonth = Self.getEndDayOfMonth(from: nextYear, calendar: calendar)","        ","        return CalendarModelBuilder.defaultLayout(","            calendar: calendar,","            startingDate: startingDayOfMonth,","            endingDate: endingDayOfMonth","        )","    }","    ","    static func getStartDayOfMonth(from date: Date, calendar: Calendar) -> Date {","        let startDateComponents = DateComponents(","            year: calendar.component(.year, from: date),","            month: calendar.component(.month, from: date),","            day: 1","        )","        return calendar.date(from: startDateComponents) ?? Date()","    }","    ","    static func getEndDayOfMonth(from date: Date, calendar: Calendar) -> Date {","        ","        if let range = calendar.range(of: .day, in: .month, for: date) {","            let lastDay = range.count","            let endDateComponents = DateComponents(","                year: calendar.component(.year, from: date),","                month: calendar.component(.month, from: date),","                day: lastDay","            )","            return calendar.date(from: endDateComponents) ?? Date()","        }","        return Date()","    }","}","","#Preview {","    var calendar = Calendar.current","    calendar.locale = Locale(identifier: \"en_US\")","    return OBCalendarDemoDoubleSelection(calendar: calendar)","}"],"fileType":"swift","fileName":"OBCalendarDemoDoubleSelection.swift"},"c3-t3-s1-step3.swift":{"content":["\/\/","\/\/  OBCalendarDemoDoubleSelection.swift","\/\/  OBCalendarDemoDoubleSelection","\/\/","\/\/  Created by Burak on 14.10.2024.","\/\/","","import SwiftUI","import ObiletCalendar","","struct OBCalendarDemoDoubleSelection: View {","    let years: [CalendarModel.Year]","    let calendar: Calendar","    ","    @State var firstSelectedDate: Date?","    @State var secondSelectedDate: Date?","    ","    init(calendar: Calendar) {","        self.calendar = calendar","        self.years = Self.getYears(from: calendar)","    }","    ","    var body: some View {","        VStack {","            Spacer()","            headerView","                .fixedSize(horizontal: false, vertical: true)","                .padding(16)","                .background(Color.red)","                .foregroundColor(.white)","            ","            daysView","                .padding(8)","                .background(Color.white)","                .compositingGroup()","                .shadow(color: .gray, radius: 1, x: 0, y: 2)","            calendarView","                .padding(4)","        }","        ","    }","    var headerView: some View {","        HStack {","            Image(systemName: \"calendar\")","            Text(\"Departure Date\")","            Spacer()","            Divider()","                .frame(width: 1)","                .background(Color.white)","            Image(systemName: \"checkmark\")","            Text(\"APPLY\")","        }","        ","    }","    ","    var daysView: some View {","        let days = getShortLocalizedWeekdays(for: calendar)","        return HStack {","            ForEach(days.indices, id: \\.self) { index in","                Text(days[index])","                    .frame(maxWidth: .infinity)","            }","        }","        ","    }","    ","    var calendarView: some View {","        OBCalendar(years: years) { model, scrollProxy in","            \/\/ Day View goes here","            let day = model.day","            ","            modifyDayView(model: day) {","                Text(\"\\(day.day)\")","                    .frame(width: 35, height: 35)","            }","            .onTapGesture {","                selectDate(of: day)","            }","            ","        } monthContent: { model, scrollProxy, daysView in","            \/\/ Month View goes here","            VStack {","                HStack {","                    Text(getMonthName(from: model.month.month))","                    Text(formatYear(model.year.year))","                }","                Divider()","                daysView","            }","            .padding(4)","        } yearContent: { model, scrollProxy, monthsView in","            \/\/ Year View goes here","            monthsView","        }","    }","    ","    func formatYear(_ year: Int) -> String {","        let numberFormatter = NumberFormatter()","        numberFormatter.numberStyle = .none","        return numberFormatter.string(from: NSNumber(value: year)) ?? \"\"","    }","    ","    func makeDate(from month: Int) -> Date {","        let components = DateComponents(month: month)","        return calendar.date(from: components) ?? Date()","    }","    ","    func getMonthName(","        from month: Int","    ) -> String {","        let date = makeDate(from: month)","        let dateFormatter = DateFormatter()","        dateFormatter.locale = Locale(identifier: calendar.locale?.identifier ?? \"\")","        dateFormatter.dateFormat = \"MMMM\"","        return dateFormatter.string(from: date)","    }","    ","    func getShortLocalizedWeekdays(","        for calendar: Calendar","    ) -> [String] {","        let firstWeekday = calendar.firstWeekday","        ","        let shortWeekdays = calendar.shortWeekdaySymbols","        let firstWeekdayIndex = firstWeekday - 1","        ","        let reorderedShortWeekdays = Array(shortWeekdays[firstWeekdayIndex...])","        + Array(shortWeekdays[..<firstWeekdayIndex])","        ","        return reorderedShortWeekdays","    }","    ","    func selectDate(of day: CalendarModel.Day) {","        let startOfToday = calendar.startOfDay(for: Date())","        let startOfDay = calendar.startOfDay(for: day.date)","        let date = day.date","        ","        if case .insideRange(.currentMonth) = day.rangeType {","            if startOfDay >= startOfToday {","                if firstSelectedDate == nil  {","                    firstSelectedDate = date","                }else if secondSelectedDate == nil {","                    if let firstSelectedDate , date < firstSelectedDate {","                        secondSelectedDate = firstSelectedDate","                        self.firstSelectedDate = date","                    }else {","                        secondSelectedDate = date","                    }","                }else {","                    firstSelectedDate = date","                    secondSelectedDate = nil","                }","            }","        }","    }","    ","    ","    func modifySelectedDayView<Content: View>(date: Date, @ViewBuilder content: () -> Content) -> some View {","        contentBuilder {","            let modifiedContent = content()","            ","            modifiedContent","                .background(","                    Circle()","                        .foregroundColor(.green)","                )","                .foregroundColor(.white)","        }","    }","    ","    func modifyDayView<Content: View>(","        model: CalendarModel.Day,","        @ViewBuilder content: () -> Content","    ) -> some View {","        contentBuilder {","            \/\/ some logic and view goes here","            let startOfToday = calendar.startOfDay(for: Date())","            let startOfDay = calendar.startOfDay(for: model.date)","            let modifiedContent = content()","            ","            if case .insideRange(.currentMonth) = model.rangeType {","                if (startOfDay < startOfToday) {","                    modifiedContent","                        .foregroundColor(.gray)","                }else {","                    if firstSelectedDate == model.date {","                        modifiedContent","                            .foregroundColor(.white)","                            .background(","                                Circle().foregroundColor(.green)","                            )","                    }else {","                        modifiedContent","                            .foregroundColor(.black)","                    }","                    ","                }","            }else {","                Color.clear","            }","        }","    }","    ","    ","    private func contentBuilder<Content: View>(@ViewBuilder content: () -> Content) -> Content {","        content()","    }","    ","}","","private extension OBCalendarDemoDoubleSelection {","    static func getYears(from calendar: Calendar) -> [CalendarModel.Year] {","        let elevenOctoberDateComponents = DateComponents(year: 2024, month: 10, day: 11)","        let elevenOctober = Calendar.current.date(from: elevenOctoberDateComponents)!","        ","        let startingDayOfMonth = Self.getStartDayOfMonth(from: elevenOctober, calendar: calendar)","        let nextYear = calendar.date(byAdding: .year, value: 1, to: startingDayOfMonth)!","        let endingDayOfMonth = Self.getEndDayOfMonth(from: nextYear, calendar: calendar)","        ","        return CalendarModelBuilder.defaultLayout(","            calendar: calendar,","            startingDate: startingDayOfMonth,","            endingDate: endingDayOfMonth","        )","    }","    ","    static func getStartDayOfMonth(from date: Date, calendar: Calendar) -> Date {","        let startDateComponents = DateComponents(","            year: calendar.component(.year, from: date),","            month: calendar.component(.month, from: date),","            day: 1","        )","        return calendar.date(from: startDateComponents) ?? Date()","    }","    ","    static func getEndDayOfMonth(from date: Date, calendar: Calendar) -> Date {","        ","        if let range = calendar.range(of: .day, in: .month, for: date) {","            let lastDay = range.count","            let endDateComponents = DateComponents(","                year: calendar.component(.year, from: date),","                month: calendar.component(.month, from: date),","                day: lastDay","            )","            return calendar.date(from: endDateComponents) ?? Date()","        }","        return Date()","    }","}","","#Preview {","    var calendar = Calendar.current","    calendar.locale = Locale(identifier: \"en_US\")","    return OBCalendarDemoDoubleSelection(calendar: calendar)","}"],"fileName":"OBCalendarDemoDoubleSelection.swift","syntax":"swift","type":"file","fileType":"swift","identifier":"c3-t3-s1-step3.swift","highlights":[{"line":156},{"line":157},{"line":158},{"line":159},{"line":160},{"line":161},{"line":162},{"line":163},{"line":164},{"line":165},{"line":166},{"line":167},{"line":168},{"line":169}]},"doc://obcalendar.ObiletCalendar/tutorials/ObiletCalendar/ImplementDoubleDateSelection#Implement-Double-Date-Selection":{"url":"\/tutorials\/obiletcalendar\/implementdoubledateselection#Implement-Double-Date-Selection","identifier":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/ImplementDoubleDateSelection#Implement-Double-Date-Selection","title":"Implement Double Date Selection","abstract":[{"text":"Some Text","type":"text"}],"role":"pseudoSymbol","kind":"section","type":"section"},"doc://obcalendar.ObiletCalendar/tutorials/ObiletCalendar/RefactorImplementSingleDateSelection#Refactor":{"identifier":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/RefactorImplementSingleDateSelection#Refactor","role":"pseudoSymbol","kind":"section","abstract":[{"text":"In future , will shown double selection so refactor this code.","type":"text"}],"type":"section","url":"\/tutorials\/obiletcalendar\/refactorimplementsingledateselection#Refactor","title":"Refactor"},"doc://obcalendar.ObiletCalendar/tutorials/ObiletCalendar/ImplementSingleDateSelection#Implement-Single-Date-Selection":{"abstract":[{"text":"Implement single date selection for users can select specific date.","type":"text"}],"title":"Implement Single Date Selection","url":"\/tutorials\/obiletcalendar\/implementsingledateselection#Implement-Single-Date-Selection","role":"pseudoSymbol","type":"section","identifier":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/ImplementSingleDateSelection#Implement-Single-Date-Selection","kind":"section"},"c3-t3-s1-step4.swift":{"identifier":"c3-t3-s1-step4.swift","fileName":"OBCalendarDemoDoubleSelection.swift","syntax":"swift","content":["\/\/","\/\/  OBCalendarDemoDoubleSelection.swift","\/\/  OBCalendarDemoDoubleSelection","\/\/","\/\/  Created by Burak on 14.10.2024.","\/\/","","import SwiftUI","import ObiletCalendar","","struct OBCalendarDemoDoubleSelection: View {","    let years: [CalendarModel.Year]","    let calendar: Calendar","    ","    @State var firstSelectedDate: Date?","    @State var secondSelectedDate: Date?","    ","    init(calendar: Calendar) {","        self.calendar = calendar","        self.years = Self.getYears(from: calendar)","    }","    ","    var body: some View {","        VStack {","            Spacer()","            headerView","                .fixedSize(horizontal: false, vertical: true)","                .padding(16)","                .background(Color.red)","                .foregroundColor(.white)","            ","            daysView","                .padding(8)","                .background(Color.white)","                .compositingGroup()","                .shadow(color: .gray, radius: 1, x: 0, y: 2)","            calendarView","                .padding(4)","        }","        ","    }","    var headerView: some View {","        HStack {","            Image(systemName: \"calendar\")","            Text(\"Departure Date\")","            Spacer()","            Divider()","                .frame(width: 1)","                .background(Color.white)","            Image(systemName: \"checkmark\")","            Text(\"APPLY\")","        }","        ","    }","    ","    var daysView: some View {","        let days = getShortLocalizedWeekdays(for: calendar)","        return HStack {","            ForEach(days.indices, id: \\.self) { index in","                Text(days[index])","                    .frame(maxWidth: .infinity)","            }","        }","        ","    }","    ","    var calendarView: some View {","        OBCalendar(years: years) { model, scrollProxy in","            \/\/ Day View goes here","            let day = model.day","            ","            modifyDayView(model: day) {","                Text(\"\\(day.day)\")","                    .frame(width: 35, height: 35)","            }","            .onTapGesture {","                selectDate(of: day)","            }","            ","        } monthContent: { model, scrollProxy, daysView in","            \/\/ Month View goes here","            VStack {","                HStack {","                    Text(getMonthName(from: model.month.month))","                    Text(formatYear(model.year.year))","                }","                Divider()","                daysView","            }","            .padding(4)","        } yearContent: { model, scrollProxy, monthsView in","            \/\/ Year View goes here","            monthsView","        }","    }","    ","    func formatYear(_ year: Int) -> String {","        let numberFormatter = NumberFormatter()","        numberFormatter.numberStyle = .none","        return numberFormatter.string(from: NSNumber(value: year)) ?? \"\"","    }","    ","    func makeDate(from month: Int) -> Date {","        let components = DateComponents(month: month)","        return calendar.date(from: components) ?? Date()","    }","    ","    func getMonthName(","        from month: Int","    ) -> String {","        let date = makeDate(from: month)","        let dateFormatter = DateFormatter()","        dateFormatter.locale = Locale(identifier: calendar.locale?.identifier ?? \"\")","        dateFormatter.dateFormat = \"MMMM\"","        return dateFormatter.string(from: date)","    }","    ","    func getShortLocalizedWeekdays(","        for calendar: Calendar","    ) -> [String] {","        let firstWeekday = calendar.firstWeekday","        ","        let shortWeekdays = calendar.shortWeekdaySymbols","        let firstWeekdayIndex = firstWeekday - 1","        ","        let reorderedShortWeekdays = Array(shortWeekdays[firstWeekdayIndex...])","        + Array(shortWeekdays[..<firstWeekdayIndex])","        ","        return reorderedShortWeekdays","    }","    ","    func selectDate(of day: CalendarModel.Day) {","        let startOfToday = calendar.startOfDay(for: Date())","        let startOfDay = calendar.startOfDay(for: day.date)","        let date = day.date","        ","        if case .insideRange(.currentMonth) = day.rangeType {","            if startOfDay >= startOfToday {","                if firstSelectedDate == nil  {","                    firstSelectedDate = date","                }else if secondSelectedDate == nil {","                    if let firstSelectedDate , date < firstSelectedDate {","                        secondSelectedDate = firstSelectedDate","                        self.firstSelectedDate = date","                    }else {","                        secondSelectedDate = date","                    }","                }else {","                    firstSelectedDate = date","                    secondSelectedDate = nil","                }","            }","        }","    }","    ","    ","    func modifySelectedDayView<Content: View>(date: Date, @ViewBuilder content: () -> Content) -> some View {","        contentBuilder {","            let modifiedContent = content()","            ","            modifiedContent","                .background(","                    Circle()","                        .foregroundColor(.green)","                )","                .foregroundColor(.white)","        }","    }","    ","    func modifyDayView<Content: View>(","        model: CalendarModel.Day,","        @ViewBuilder content: () -> Content","    ) -> some View {","        contentBuilder {","            \/\/ some logic and view goes here","            let startOfToday = calendar.startOfDay(for: Date())","            let startOfDay = calendar.startOfDay(for: model.date)","            ","            ","            if case .insideRange(.currentMonth) = model.rangeType {","                if (startOfDay < startOfToday) {","                    content()","                        .foregroundColor(.gray)","                }else {","                    if  model.date == firstSelectedDate || model.date == secondSelectedDate {","                        modifySelectedDayView(date: model.date, content: content)","                    }else {","                        content()","                            .foregroundColor(.black)","                    }","                    ","                }","            }else {","                Color.clear","            }","        }","    }","    ","    ","    private func contentBuilder<Content: View>(@ViewBuilder content: () -> Content) -> Content {","        content()","    }","    ","}","","private extension OBCalendarDemoDoubleSelection {","    static func getYears(from calendar: Calendar) -> [CalendarModel.Year] {","        let elevenOctoberDateComponents = DateComponents(year: 2024, month: 10, day: 11)","        let elevenOctober = Calendar.current.date(from: elevenOctoberDateComponents)!","        ","        let startingDayOfMonth = Self.getStartDayOfMonth(from: elevenOctober, calendar: calendar)","        let nextYear = calendar.date(byAdding: .year, value: 1, to: startingDayOfMonth)!","        let endingDayOfMonth = Self.getEndDayOfMonth(from: nextYear, calendar: calendar)","        ","        return CalendarModelBuilder.defaultLayout(","            calendar: calendar,","            startingDate: startingDayOfMonth,","            endingDate: endingDayOfMonth","        )","    }","    ","    static func getStartDayOfMonth(from date: Date, calendar: Calendar) -> Date {","        let startDateComponents = DateComponents(","            year: calendar.component(.year, from: date),","            month: calendar.component(.month, from: date),","            day: 1","        )","        return calendar.date(from: startDateComponents) ?? Date()","    }","    ","    static func getEndDayOfMonth(from date: Date, calendar: Calendar) -> Date {","        ","        if let range = calendar.range(of: .day, in: .month, for: date) {","            let lastDay = range.count","            let endDateComponents = DateComponents(","                year: calendar.component(.year, from: date),","                month: calendar.component(.month, from: date),","                day: lastDay","            )","            return calendar.date(from: endDateComponents) ?? Date()","        }","        return Date()","    }","}","","#Preview {","    var calendar = Calendar.current","    calendar.locale = Locale(identifier: \"en_US\")","    return OBCalendarDemoDoubleSelection(calendar: calendar)","}"],"fileType":"swift","type":"file","highlights":[{"line":179},{"line":182},{"line":185},{"line":186},{"line":188}]},"c3-t3-s1-step1.png":{"alt":"desc","identifier":"c3-t3-s1-step1.png","variants":[{"url":"\/images\/obcalendar.ObiletCalendar\/c3-t3-s1-step1.png","traits":["1x","light"]}],"type":"image"},"doc://obcalendar.ObiletCalendar/tutorials/ObiletCalendar/ImplementSingleDateSelection":{"kind":"project","role":"project","abstract":[{"text":"Implement single date selection for users can select specific date.","type":"text"}],"estimatedTime":"10min","identifier":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/ImplementSingleDateSelection","type":"topic","url":"\/tutorials\/obiletcalendar\/implementsingledateselection","title":"Implement Single Date Selection"},"doc://obcalendar.ObiletCalendar/tutorials/ObiletCalendar/SetupEmptyProject#Create-a-new-project-and-add-ObiletCalendar":{"identifier":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/SetupEmptyProject#Create-a-new-project-and-add-ObiletCalendar","type":"section","abstract":[],"role":"pseudoSymbol","url":"\/tutorials\/obiletcalendar\/setupemptyproject#Create-a-new-project-and-add-ObiletCalendar","title":"Create a new project and add ObiletCalendar","kind":"section"},"doc://obcalendar.ObiletCalendar/tutorials/ObiletCalendar/Create-Demo-Project":{"identifier":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/Create-Demo-Project","url":"\/tutorials\/obiletcalendar\/create-demo-project","title":"Create Demo Project","kind":"article","role":"article","type":"topic","abstract":[]},"c3-t3-s1-step6.png":{"alt":"desc","identifier":"c3-t3-s1-step6.png","variants":[{"url":"\/images\/obcalendar.ObiletCalendar\/c3-t3-s1-step6.png","traits":["1x","light"]}],"type":"image"},"doc://obcalendar.ObiletCalendar/tutorials/ObiletCalendar/CreateSkeletonView":{"role":"project","estimatedTime":"5min","type":"topic","kind":"project","identifier":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/CreateSkeletonView","url":"\/tutorials\/obiletcalendar\/createskeletonview","title":"Create Skeleton View","abstract":[]},"c3-t3-s1-step4.png":{"alt":"desc","identifier":"c3-t3-s1-step4.png","variants":[{"url":"\/images\/obcalendar.ObiletCalendar\/c3-t3-s1-step4.png","traits":["1x","light"]}],"type":"image"},"doc://obcalendar.ObiletCalendar/tutorials/ObiletCalendar/ChangeDayView#Hide-Some-Days":{"type":"section","kind":"section","title":"Hide Some Days","abstract":[{"type":"text","text":"Change view of "},{"code":"day","type":"codeVoice"},{"type":"text","text":" by "},{"isActive":true,"type":"reference","overridingTitleInlineContent":[{"text":"Date Type","type":"text"}],"overridingTitle":"Date Type","identifier":"doc:\/\/obcalendar.ObiletCalendar\/documentation\/ObiletCalendar\/CalendarModel\/Day\/DateType"},{"type":"text","text":" and "},{"overridingTitle":"Range Type","overridingTitleInlineContent":[{"text":"Range Type","type":"text"}],"isActive":true,"identifier":"doc:\/\/obcalendar.ObiletCalendar\/documentation\/ObiletCalendar\/CalendarModel\/Day\/RangeType-swift.enum","type":"reference"}],"url":"\/tutorials\/obiletcalendar\/changedayview#Hide-Some-Days","role":"pseudoSymbol","identifier":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/ChangeDayView#Hide-Some-Days"},"doc://obcalendar.ObiletCalendar/tutorials/ObiletCalendar/Implement-Special-Day-View":{"kind":"article","title":"Implement Special Day View","type":"topic","url":"\/tutorials\/obiletcalendar\/implement-special-day-view","abstract":[],"identifier":"doc:\/\/obcalendar.ObiletCalendar\/tutorials\/ObiletCalendar\/Implement-Special-Day-View","role":"article"}}}