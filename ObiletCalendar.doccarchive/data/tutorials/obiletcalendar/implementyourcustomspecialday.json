{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/tutorials\/obiletcalendar\/implementyourcustomspecialday"]}],"sections":[{"kind":"hero","chapter":"Implement Special Day View","title":"Implement Special Day","estimatedTimeInMinutes":7,"content":[]},{"kind":"tasks","tasks":[{"anchor":"Implement-Your-Custom-Special-Day","contentSection":[{"kind":"contentAndMedia","content":[{"inlineContent":[{"type":"text","text":"Create your custom special day."}],"type":"paragraph"}],"mediaPosition":"trailing"}],"stepsSection":[{"code":"c4-t1-s1-s1.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create "},{"type":"codeVoice","code":"OBCalendarWithSpecialDay.swift"},{"type":"text","text":" file."}]}],"caption":[],"type":"step","runtimePreview":"c4-t1-s1-s1.png","media":null},{"type":"step","media":null,"caption":[],"code":"c4-t1-s1-s2.swift","content":[{"inlineContent":[{"type":"text","text":"Update with "},{"code":"contentBuilder","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"modifyDayView"}],"type":"paragraph"}],"runtimePreview":"c4-t1-s1-s2.png"},{"runtimePreview":"c4-t1-s1-s3.png","caption":[{"inlineContent":[{"text":"Write extension to create special days","type":"text"}],"type":"paragraph"}],"type":"step","media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add "},{"type":"codeVoice","code":"specialDays"},{"text":" variable and take it in initializer.","type":"text"}]}],"code":"c4-t1-s1-s3.swift"},{"code":"c4-t1-s1-s4.swift","runtimePreview":"c4-t1-s1-s4.png","type":"step","caption":[],"content":[{"type":"paragraph","inlineContent":[{"text":"Write extension for dictionary","type":"text"}]}],"media":null},{"type":"step","runtimePreview":"c4-t1-s1-s5.png","caption":[],"content":[{"inlineContent":[{"type":"text","text":"Create "},{"type":"codeVoice","code":"modifySpecialDayView(model:content:)"},{"type":"text","text":" to create small circle in dayView."},{"type":"text","text":" "},{"text":"Use ","type":"text"},{"code":"modifySpecialDayView(model:content:)","type":"codeVoice"},{"text":" in dayView.","type":"text"}],"type":"paragraph"}],"media":null,"code":"c4-t1-s1-s5.swift"},{"type":"step","caption":[],"runtimePreview":"c4-t1-s1-s6.png","code":"c4-t1-s1-s6.swift","media":null,"content":[{"inlineContent":[{"type":"text","text":"Create "},{"code":"makeSpecialDaysView(year:month:)","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}]},{"media":null,"caption":[],"code":"c4-t1-s1-s7.swift","type":"step","runtimePreview":"c4-t1-s1-s7.png","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use "},{"type":"codeVoice","code":"modifySpecialDayView(model:content:)"},{"type":"text","text":" in "},{"code":"monthModifier","type":"codeVoice"},{"text":".","type":"text"}]}]}],"title":"Implement Your Custom Special Day"}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/ImplementYourCustomSpecialDay"},"schemaVersion":{"minor":3,"patch":0,"major":0},"metadata":{"title":"Implement Special Day","category":"","categoryPathComponent":"MeetObiletCalendar","role":"project"},"hierarchy":{"paths":[["doc:\/\/ObiletCalendar\/tutorials\/MeetObiletCalendar","doc:\/\/ObiletCalendar\/tutorials\/MeetObiletCalendar\/$volume","doc:\/\/ObiletCalendar\/tutorials\/MeetObiletCalendar\/Implement-Special-Day-View"]],"modules":[{"projects":[{"reference":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/SetupEmptyProject","sections":[{"kind":"task","reference":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/SetupEmptyProject#Create-a-new-project-and-add-ObiletCalendar"}]},{"reference":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/CreateBaseView","sections":[{"kind":"task","reference":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/CreateBaseView#Add-a-Base-view"},{"kind":"task","reference":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/CreateBaseView#Explore-a-Base-View-Range"}]},{"sections":[{"reference":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/UnderstandModifiers#Day-Modifier","kind":"task"},{"reference":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/UnderstandModifiers#Include-Parameter","kind":"task"},{"reference":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/UnderstandModifiers#Month-Modifier","kind":"task"},{"kind":"task","reference":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/UnderstandModifiers#Modified-Day-+-Modified-Month"}],"reference":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/UnderstandModifiers"},{"sections":[{"reference":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/BaseCalendar#OBBaseCalendar","kind":"task"}],"reference":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/BaseCalendar"}],"reference":"doc:\/\/ObiletCalendar\/tutorials\/MeetObiletCalendar\/Create-Demo-Project"},{"projects":[{"sections":[{"reference":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/ImproveUserInterface#Add-Weekdays-View","kind":"task"}],"reference":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/ImproveUserInterface"},{"sections":[{"reference":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/ChangeDayView#Hide-Some-Days","kind":"task"}],"reference":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/ChangeDayView"}],"reference":"doc:\/\/ObiletCalendar\/tutorials\/MeetObiletCalendar\/Improve-User-Interface"},{"reference":"doc:\/\/ObiletCalendar\/tutorials\/MeetObiletCalendar\/Implement-Date-Selection","projects":[{"reference":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/ImplementSingleDateSelection","sections":[{"reference":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/ImplementSingleDateSelection#Refactor-Code","kind":"task"},{"kind":"task","reference":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/ImplementSingleDateSelection#Implement-Single-Date"}]},{"reference":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/ImplementDoubleDateSelection","sections":[{"kind":"task","reference":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/ImplementDoubleDateSelection#Implement-Double-Date-Selection"}]}]},{"reference":"doc:\/\/ObiletCalendar\/tutorials\/MeetObiletCalendar\/Implement-Special-Day-View","projects":[{"reference":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/ImplementYourCustomSpecialDay","sections":[{"reference":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/ImplementYourCustomSpecialDay#Implement-Your-Custom-Special-Day","kind":"task"}]}]}],"reference":"doc:\/\/ObiletCalendar\/tutorials\/MeetObiletCalendar"},"kind":"project","references":{"doc://ObiletCalendar/tutorials/ObiletCalendar/BaseCalendar":{"abstract":[{"text":"You can more manage your calendar using ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ObiletCalendar\/documentation\/ObiletCalendar\/OBBaseCalendar"},{"text":".If you previous steps are enough for you, you can skip this section.","type":"text"}],"kind":"project","type":"topic","estimatedTime":"10min","title":"Understand BaseCalendar","role":"project","url":"\/tutorials\/obiletcalendar\/basecalendar","identifier":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/BaseCalendar"},"doc://ObiletCalendar/tutorials/ObiletCalendar/UnderstandModifiers#Include-Parameter":{"url":"\/tutorials\/obiletcalendar\/understandmodifiers#Include-Parameter","kind":"section","identifier":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/UnderstandModifiers#Include-Parameter","type":"section","title":"Include Parameter","abstract":[],"role":"pseudoSymbol"},"doc://ObiletCalendar/tutorials/MeetObiletCalendar/Implement-Date-Selection":{"abstract":[],"url":"\/tutorials\/meetobiletcalendar\/implement-date-selection","kind":"article","title":"Implement Date Selection","role":"article","type":"topic","identifier":"doc:\/\/ObiletCalendar\/tutorials\/MeetObiletCalendar\/Implement-Date-Selection"},"doc://ObiletCalendar/tutorials/ObiletCalendar/ImplementSingleDateSelection#Refactor-Code":{"url":"\/tutorials\/obiletcalendar\/implementsingledateselection#Refactor-Code","role":"pseudoSymbol","abstract":[{"type":"text","text":"Implement single date selection for users can select specific date."}],"identifier":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/ImplementSingleDateSelection#Refactor-Code","kind":"section","title":"Refactor Code","type":"section"},"c4-t1-s1-s6.swift":{"identifier":"c4-t1-s1-s6.swift","content":["\/\/","\/\/  OBCalendarWithSpecialDay.swift","\/\/  OBCalendarWithSpecialDay","\/\/","\/\/  Created by Burak GÃ¼l on 19.11.2024.","\/\/","","import SwiftUI","import ObiletCalendar","","struct OBCalendarWithSpecialDay: View {","    var calendar: Calendar = Calendar.current","    let specialDays: [Date?: String]","    ","    var OBRed = Self.makeColor(red: 210, green: 59, blue: 56)","    var OBGray = Self.makeColor(red: 239, green: 239, blue: 239)","    var OBBlue = Self.makeColor(red: 47, green: 91, blue: 141)","    ","    init(_ calendar: Calendar) {","        self.calendar = calendar","        self.specialDays = Self.makeSpecialDays(calendar: calendar)","    }","    ","    var body: some View {","        VStack(spacing:0) {","            Spacer()","            headerView","                .fixedSize(horizontal: false, vertical: true)","                .padding()","                .background(OBRed)","                .foregroundColor(.white)","            ","            weekdaysView","                .padding(.vertical,8)","                .padding(.horizontal,16)","                .background(OBGray)","            calendarView","        }","    }","    ","    var calendarView: some View {","        OBCalendar(calendar:calendar)","            .dayModifier { baseView, model in","                let modifiedContent = modifyDayView(model: model.day){","                    baseView","                }","                ","                modifySpecialDayView(model: model.day) {","                    modifiedContent","                }","            }","    }","    ","    var weekdaysView: some View {","        let weekdays = getShortLocalizedWeekdays(for: calendar)","        return HStack {","            ForEach(weekdays.indices, id: \\.self) { index in","                Text(weekdays[index])","                    .frame(maxWidth: .infinity)","            }","        }","    }","    ","    var headerView: some View {","        HStack {","            Text(\"Departure\")","            Spacer()","            Image(systemName: \"xmark\")","        }","    }","    ","    func getShortLocalizedWeekdays(","        for calendar: Calendar","    ) -> [String] {","        let firstWeekday = calendar.firstWeekday","        let shortWeekdays = calendar.shortWeekdaySymbols","        let firstWeekdayIndex = firstWeekday - 1","        let reorderedShortWeekdays = Array(shortWeekdays[firstWeekdayIndex...])","        + Array(shortWeekdays[..<firstWeekdayIndex])","        return reorderedShortWeekdays","    }","    ","    private func contentBuilder<Content: View>(@ViewBuilder content: () -> Content) -> Content {","        content()","    }","    ","    func modifyDayView<Content:View>(model: CalendarModel.Day, @ViewBuilder content: () -> Content ) -> some View {","        contentBuilder {","            let day = model.day","            let today = calendar.startOfDay(for: Date())","            let dayDate = calendar.startOfDay(for: model.date)","            ","            if model.isInRangeCurrentMonth {","                if dayDate < today {","                    content()","                        .foregroundColor(.gray)","                }else {","                    content()","                }","            }","        }","    }","    ","    func modifySpecialDayView<Content: View>(","        model: CalendarModel.Day,","        @ViewBuilder content: () -> Content","    ) -> some View {","        contentBuilder {","            \/\/ some logic and view goes here","            let startOfToday = calendar.startOfDay(for: Date())","            let startOfDay = calendar.startOfDay(for: model.date)","            let modifiedContent = content()","            ","            if case .insideRange(.currentMonth) = model.rangeType {","                ","                if (startOfDay < startOfToday) {","                    modifiedContent","                }else {","                    if specialDays.contains(date: model.date) , !specialDays.isEmpty {","                        modifiedContent","                            .overlay(","                                VStack(alignment: .trailing, content: {","                                    Image(systemName: \"circle.fill\")","                                        .resizable()","                                        .frame(width: 6, height: 6)","                                        .foregroundColor(OBBlue)","                                        .frame(maxWidth: .infinity,alignment: .trailing)","                                    Spacer()","                                })","                                .padding(8)","                                ","                            )","                    }else {","                        modifiedContent","                    }","                }","            }else {","                Color.clear","            }","        }","    }","    ","    func makeSpecialDaysView(year: Int, month: CalendarModel.Month) -> some View {","        contentBuilder {","            if specialDays.yearExist(year: year, calendar: calendar) {","                ForEach(month.days.indices, id: \\.self) { index in","                    let day = month.days[index]","                    if case .insideRange(.currentMonth) = day.rangeType,","                       let specialDay = specialDays.get(year: year, month: month.month, day: day.day, calendar: calendar){","                        HStack {","                            Image(systemName: \"circle.fill\")","                                .resizable()","                                .frame(width: 6, height: 6)","                                .aspectRatio(contentMode: .fit)","                                .foregroundColor(OBBlue)","                            Text(specialDay.value)","                        }","                    }","                }","            }","        }","    }","}","","private extension OBCalendarWithSpecialDay {","    static func makeColor(red: Int, green: Int, blue: Int) -> Color {","        Color(","            red: Double(red) \/ 255,","            green: Double(green) \/ 255,","            blue: Double(blue) \/ 255","        )","    }","    static func makeSpecialDays(calendar: Calendar) -> [Date?: String] {","        [","            calendar.date(from: DateComponents(year: 2024, month: 11, day: 25)): \"Mock Event 1\",","            calendar.date(from: DateComponents(year: 2025, month: 1, day: 1)): \"New Year's Day\",","            calendar.date(from: DateComponents(year: 2024, month: 12, day: 25)): \"Christmas\",","            calendar.date(from: DateComponents(year: 2024, month: 4, day: 23)): \"National Sovereignty and Children's Day\",","            calendar.date(from: DateComponents(year: 2024, month: 5, day: 1)): \"Labor Day\",","            calendar.date(from: DateComponents(year: 2024, month: 8, day: 30)): \"Victory Day\"","        ]","","    }","    ","}","","extension Dictionary where Key == Date?, Value == String {","    func yearExist(year: Int, calendar: Calendar) -> Bool {","        self.contains { element in","            if let date = element.key {","                year == calendar.component(.year, from: date)","            }else {","                false","            }","        }","    }","    ","    func get(year: Int, month: Int, day: Int, calendar: Calendar) -> Dictionary<Date?,String>.Element? {","        self.first { element in","            if let date = element.key {","                return year == calendar.component(.year, from: date)","                && month == calendar.component(.month, from: date)","                && day == calendar.component(.day, from: date)","            }else {","                return false","            }","        }","    }","    ","    func contains(date: Date) -> Bool {","        self.contains { element in","            element.key ==  date","        }","    }","}","","#Preview {","    let calendar = Calendar.current","    return OBCalendarWithSpecialDay(calendar)","}",""],"fileName":"OBCalendarWithSpecialDay.swift","highlights":[{"line":142},{"line":143},{"line":144},{"line":145},{"line":146},{"line":147},{"line":148},{"line":149},{"line":150},{"line":151},{"line":152},{"line":153},{"line":154},{"line":155},{"line":156},{"line":157},{"line":158},{"line":159},{"line":160},{"line":161},{"line":162}],"type":"file","syntax":"swift","fileType":"swift"},"doc://ObiletCalendar/tutorials/ObiletCalendar/UnderstandModifiers#Modified-Day-+-Modified-Month":{"abstract":[],"kind":"section","type":"section","title":"Modified Day + Modified Month","role":"pseudoSymbol","url":"\/tutorials\/obiletcalendar\/understandmodifiers#Modified-Day-+-Modified-Month","identifier":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/UnderstandModifiers#Modified-Day-+-Modified-Month"},"doc://ObiletCalendar/tutorials/ObiletCalendar/BaseCalendar#OBBaseCalendar":{"kind":"section","role":"pseudoSymbol","type":"section","title":"OBBaseCalendar","url":"\/tutorials\/obiletcalendar\/basecalendar#OBBaseCalendar","identifier":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/BaseCalendar#OBBaseCalendar","abstract":[{"type":"text","text":"You can more manage your calendar using "},{"type":"reference","identifier":"doc:\/\/ObiletCalendar\/documentation\/ObiletCalendar\/OBBaseCalendar","isActive":true},{"text":".If you previous steps are enough for you, you can skip this section.","type":"text"}]},"doc://ObiletCalendar/tutorials/MeetObiletCalendar/Create-Demo-Project":{"kind":"article","url":"\/tutorials\/meetobiletcalendar\/create-demo-project","abstract":[],"identifier":"doc:\/\/ObiletCalendar\/tutorials\/MeetObiletCalendar\/Create-Demo-Project","title":"Create Demo Project","role":"article","type":"topic"},"doc://ObiletCalendar/tutorials/ObiletCalendar/ImplementDoubleDateSelection#Implement-Double-Date-Selection":{"url":"\/tutorials\/obiletcalendar\/implementdoubledateselection#Implement-Double-Date-Selection","role":"pseudoSymbol","abstract":[],"identifier":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/ImplementDoubleDateSelection#Implement-Double-Date-Selection","kind":"section","title":"Implement Double Date Selection","type":"section"},"c4-t1-s1-s7.swift":{"fileName":"OBCalendarWithSpecialDay.swift","identifier":"c4-t1-s1-s7.swift","highlights":[{"line":52},{"line":53},{"line":54},{"line":55},{"line":56},{"line":57},{"line":58},{"line":59},{"line":60},{"line":61},{"line":62},{"line":63},{"line":170}],"syntax":"swift","fileType":"swift","content":["\/\/","\/\/  OBCalendarWithSpecialDay.swift","\/\/  OBCalendarWithSpecialDay","\/\/","\/\/  Created by Burak GÃ¼l on 19.11.2024.","\/\/","","import SwiftUI","import ObiletCalendar","","struct OBCalendarWithSpecialDay: View {","    var calendar: Calendar = Calendar.current","    let specialDays: [Date?: String]","    ","    var OBRed = Self.makeColor(red: 210, green: 59, blue: 56)","    var OBGray = Self.makeColor(red: 239, green: 239, blue: 239)","    var OBBlue = Self.makeColor(red: 47, green: 91, blue: 141)","    ","    init(_ calendar: Calendar) {","        self.calendar = calendar","        self.specialDays = Self.makeSpecialDays(calendar: calendar)","    }","    ","    var body: some View {","        VStack(spacing:0) {","            Spacer()","            headerView","                .fixedSize(horizontal: false, vertical: true)","                .padding()","                .background(OBRed)","                .foregroundColor(.white)","            ","            weekdaysView","                .padding(.vertical,8)","                .padding(.horizontal,16)","                .background(OBGray)","            calendarView","        }","    }","    ","    var calendarView: some View {","        OBCalendar(calendar:calendar)","            .dayModifier { baseView, model in","                let modifiedContent = modifyDayView(model: model.day){","                    baseView","                }","                ","                modifySpecialDayView(model: model.day) {","                    modifiedContent","                }","            }","            .monthModifier { baseView, daysView, model in","                VStack {","                    baseView","                    ","                    if !specialDays.isEmpty {","                        makeSpecialDaysView(year: model.year.year, month: model.month)","                            .frame(maxWidth: .infinity,alignment: .leading)","                            .padding()","                        ","                    }","                }","            }","    }","    ","    var weekdaysView: some View {","        let weekdays = getShortLocalizedWeekdays(for: calendar)","        return HStack {","            ForEach(weekdays.indices, id: \\.self) { index in","                Text(weekdays[index])","                    .frame(maxWidth: .infinity)","            }","        }","    }","    ","    var headerView: some View {","        HStack {","            Text(\"Departure\")","            Spacer()","            Image(systemName: \"xmark\")","        }","    }","    ","    func getShortLocalizedWeekdays(","        for calendar: Calendar","    ) -> [String] {","        let firstWeekday = calendar.firstWeekday","        let shortWeekdays = calendar.shortWeekdaySymbols","        let firstWeekdayIndex = firstWeekday - 1","        let reorderedShortWeekdays = Array(shortWeekdays[firstWeekdayIndex...])","        + Array(shortWeekdays[..<firstWeekdayIndex])","        return reorderedShortWeekdays","    }","    ","    private func contentBuilder<Content: View>(@ViewBuilder content: () -> Content) -> Content {","        content()","    }","    ","    func modifyDayView<Content:View>(model: CalendarModel.Day, @ViewBuilder content: () -> Content ) -> some View {","        contentBuilder {","            let day = model.day","            let today = calendar.startOfDay(for: Date())","            let dayDate = calendar.startOfDay(for: model.date)","            ","            if model.isInRangeCurrentMonth {","                if dayDate < today {","                    content()","                        .foregroundColor(.gray)","                }else {","                    content()","                }","            }","        }","    }","    ","    func modifySpecialDayView<Content: View>(","        model: CalendarModel.Day,","        @ViewBuilder content: () -> Content","    ) -> some View {","        contentBuilder {","            \/\/ some logic and view goes here","            let startOfToday = calendar.startOfDay(for: Date())","            let startOfDay = calendar.startOfDay(for: model.date)","            let modifiedContent = content()","            ","            if case .insideRange(.currentMonth) = model.rangeType {","                ","                if (startOfDay < startOfToday) {","                    modifiedContent","                }else {","                    if specialDays.contains(date: model.date) , !specialDays.isEmpty {","                        modifiedContent","                            .overlay(","                                VStack(alignment: .trailing, content: {","                                    Image(systemName: \"circle.fill\")","                                        .resizable()","                                        .frame(width: 6, height: 6)","                                        .foregroundColor(OBBlue)","                                        .frame(maxWidth: .infinity,alignment: .trailing)","                                    Spacer()","                                })","                                .padding(8)","                                ","                            )","                    }else {","                        modifiedContent","                    }","                }","            }else {","                Color.clear","            }","        }","    }","    ","    func makeSpecialDaysView(year: Int, month: CalendarModel.Month) -> some View {","        contentBuilder {","            if specialDays.yearExist(year: year, calendar: calendar) {","                ForEach(month.days.indices, id: \\.self) { index in","                    let day = month.days[index]","                    if case .insideRange(.currentMonth) = day.rangeType,","                       let specialDay = specialDays.get(year: year, month: month.month, day: day.day, calendar: calendar){","                        HStack {","                            Image(systemName: \"circle.fill\")","                                .resizable()","                                .frame(width: 6, height: 6)","                                .aspectRatio(contentMode: .fit)","                                .foregroundColor(OBBlue)","                            Text(specialDay.value)","                        }","                        Divider()","                    }","                }","            }","        }","    }","}","","private extension OBCalendarWithSpecialDay {","    static func makeColor(red: Int, green: Int, blue: Int) -> Color {","        Color(","            red: Double(red) \/ 255,","            green: Double(green) \/ 255,","            blue: Double(blue) \/ 255","        )","    }","    static func makeSpecialDays(calendar: Calendar) -> [Date?: String] {","        [","            calendar.date(from: DateComponents(year: 2024, month: 11, day: 25)): \"Mock Event 1\",","            calendar.date(from: DateComponents(year: 2025, month: 1, day: 1)): \"New Year's Day\",","            calendar.date(from: DateComponents(year: 2024, month: 12, day: 25)): \"Christmas\",","            calendar.date(from: DateComponents(year: 2024, month: 4, day: 23)): \"National Sovereignty and Children's Day\",","            calendar.date(from: DateComponents(year: 2024, month: 5, day: 1)): \"Labor Day\",","            calendar.date(from: DateComponents(year: 2024, month: 8, day: 30)): \"Victory Day\"","        ]","    }","    ","}","","extension Dictionary where Key == Date?, Value == String {","    func yearExist(year: Int, calendar: Calendar) -> Bool {","        self.contains { element in","            if let date = element.key {","                year == calendar.component(.year, from: date)","            }else {","                false","            }","        }","    }","    ","    func get(year: Int, month: Int, day: Int, calendar: Calendar) -> Dictionary<Date?,String>.Element? {","        self.first { element in","            if let date = element.key {","                return year == calendar.component(.year, from: date)","                && month == calendar.component(.month, from: date)","                && day == calendar.component(.day, from: date)","            }else {","                return false","            }","        }","    }","    ","    func contains(date: Date) -> Bool {","        self.contains { element in","            element.key ==  date","        }","    }","}","","#Preview {","    let calendar = Calendar.current","    return OBCalendarWithSpecialDay(calendar)","}",""],"type":"file"},"c4-t1-s1-s2.png":{"alt":null,"type":"image","identifier":"c4-t1-s1-s2.png","variants":[{"url":"\/images\/c4-t1-s1-s2.png","traits":["1x","light"]}]},"doc://ObiletCalendar/documentation/ObiletCalendar/OBBaseCalendar":{"role":"symbol","type":"topic","kind":"symbol","identifier":"doc:\/\/ObiletCalendar\/documentation\/ObiletCalendar\/OBBaseCalendar","title":"OBBaseCalendar","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"OBBaseCalendar"}],"navigatorTitle":[{"text":"OBBaseCalendar","kind":"identifier"}],"url":"\/documentation\/obiletcalendar\/obbasecalendar","abstract":[]},"doc://ObiletCalendar/tutorials/ObiletCalendar/ImproveUserInterface":{"url":"\/tutorials\/obiletcalendar\/improveuserinterface","role":"project","abstract":[{"type":"text","text":"Improve the user interface by adding weekdays and a header view."}],"estimatedTime":"10min","identifier":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/ImproveUserInterface","kind":"project","title":"Improve User Interface","type":"topic"},"doc://ObiletCalendar/tutorials/ObiletCalendar/SetupEmptyProject":{"url":"\/tutorials\/obiletcalendar\/setupemptyproject","role":"project","abstract":[{"type":"text","text":"Setup Empty Project"}],"estimatedTime":"3min","identifier":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/SetupEmptyProject","kind":"project","title":"Setup Empty Project","type":"topic"},"doc://ObiletCalendar/tutorials/ObiletCalendar/ChangeDayView#Hide-Some-Days":{"url":"\/tutorials\/obiletcalendar\/changedayview#Hide-Some-Days","role":"pseudoSymbol","abstract":[],"kind":"section","type":"section","title":"Hide Some Days","identifier":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/ChangeDayView#Hide-Some-Days"},"c4-t1-s1-s3.swift":{"syntax":"swift","type":"file","identifier":"c4-t1-s1-s3.swift","fileName":"OBCalendarWithSpecialDay.swift","fileType":"swift","highlights":[{"line":13},{"line":20},{"line":109},{"line":110},{"line":111},{"line":112},{"line":113},{"line":114},{"line":115},{"line":116},{"line":117},{"line":118},{"line":119}],"content":["\/\/","\/\/  OBCalendarWithSpecialDay.swift","\/\/  OBCalendarWithSpecialDay","\/\/","\/\/  Created by Burak GÃ¼l on 19.11.2024.","\/\/","","import SwiftUI","import ObiletCalendar","","struct OBCalendarWithSpecialDay: View {","    var calendar: Calendar = Calendar.current","    let specialDays: [Date?: String]","    ","    var OBRed = Self.makeColor(red: 210, green: 59, blue: 56)","    var OBGray = Self.makeColor(red: 239, green: 239, blue: 239)","    ","    init(_ calendar: Calendar) {","        self.calendar = calendar","        self.specialDays = Self.makeSpecialDays(calendar: calendar)","    }","    ","    var body: some View {","        VStack(spacing:0) {","            Spacer()","            headerView","                .fixedSize(horizontal: false, vertical: true)","                .padding()","                .background(OBRed)","                .foregroundColor(.white)","            ","            weekdaysView","                .padding(.vertical,8)","                .padding(.horizontal,16)","                .background(OBGray)","            calendarView","        }","    }","    ","    var calendarView: some View {","        OBCalendar(calendar:calendar)","            .dayModifier { baseView, model in","                modifyDayView(model: model.day){","                    baseView","                }","            }","    }","    ","    var weekdaysView: some View {","        let weekdays = getShortLocalizedWeekdays(for: calendar)","        return HStack {","            ForEach(weekdays.indices, id: \\.self) { index in","                Text(weekdays[index])","                    .frame(maxWidth: .infinity)","            }","        }","    }","    ","    var headerView: some View {","        HStack {","            Text(\"Departure\")","            Spacer()","            Image(systemName: \"xmark\")","        }","    }","    ","    func getShortLocalizedWeekdays(","        for calendar: Calendar","    ) -> [String] {","        let firstWeekday = calendar.firstWeekday","        let shortWeekdays = calendar.shortWeekdaySymbols","        let firstWeekdayIndex = firstWeekday - 1","        let reorderedShortWeekdays = Array(shortWeekdays[firstWeekdayIndex...])","        + Array(shortWeekdays[..<firstWeekdayIndex])","        return reorderedShortWeekdays","    }","    ","    private func contentBuilder<Content: View>(@ViewBuilder content: () -> Content) -> Content {","        content()","    }","    ","    func modifyDayView<Content:View>(model: CalendarModel.Day, @ViewBuilder content: () -> Content ) -> some View {","        contentBuilder {","            let day = model.day","            let today = calendar.startOfDay(for: Date())","            let dayDate = calendar.startOfDay(for: model.date)","            ","            if model.isInRangeCurrentMonth {","                if dayDate < today {","                    content()","                        .foregroundColor(.gray)","                }else {","                    content()","                }","            }","        }","    }","}","","private extension OBCalendarWithSpecialDay {","    static func makeColor(red: Int, green: Int, blue: Int) -> Color {","        Color(","            red: Double(red) \/ 255,","            green: Double(green) \/ 255,","            blue: Double(blue) \/ 255","        )","    }","    ","    static func makeSpecialDays(calendar: Calendar) -> [Date?: String] {","        [","            calendar.date(from: DateComponents(year: 2024, month: 11, day: 25)): \"Mock Event 1\",","            calendar.date(from: DateComponents(year: 2025, month: 1, day: 1)): \"New Year's Day\",","            calendar.date(from: DateComponents(year: 2024, month: 12, day: 25)): \"Christmas\",","            calendar.date(from: DateComponents(year: 2024, month: 4, day: 23)): \"National Sovereignty and Children's Day\",","            calendar.date(from: DateComponents(year: 2024, month: 5, day: 1)): \"Labor Day\",","            calendar.date(from: DateComponents(year: 2024, month: 8, day: 30)): \"Victory Day\"","        ]","    }","    ","}","","#Preview {","    let calendar = Calendar.current","    return OBCalendarWithSpecialDay(calendar)","}",""]},"doc://ObiletCalendar/tutorials/ObiletCalendar/ChangeDayView":{"abstract":[],"kind":"project","type":"topic","estimatedTime":"1min","title":"Change Day View","role":"project","url":"\/tutorials\/obiletcalendar\/changedayview","identifier":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/ChangeDayView"},"c4-t1-s1-s5.swift":{"type":"file","identifier":"c4-t1-s1-s5.swift","content":["\/\/","\/\/  OBCalendarWithSpecialDay.swift","\/\/  OBCalendarWithSpecialDay","\/\/","\/\/  Created by Burak GÃ¼l on 19.11.2024.","\/\/","","import SwiftUI","import ObiletCalendar","","struct OBCalendarWithSpecialDay: View {","    var calendar: Calendar = Calendar.current","    let specialDays: [Date?: String]","    ","    var OBRed = Self.makeColor(red: 210, green: 59, blue: 56)","    var OBGray = Self.makeColor(red: 239, green: 239, blue: 239)","    var OBBlue = Self.makeColor(red: 47, green: 91, blue: 141)","    ","    init(_ calendar: Calendar) {","        self.calendar = calendar","        self.specialDays = Self.makeSpecialDays(calendar: calendar)","    }","    ","    var body: some View {","        VStack(spacing:0) {","            Spacer()","            headerView","                .fixedSize(horizontal: false, vertical: true)","                .padding()","                .background(OBRed)","                .foregroundColor(.white)","            ","            weekdaysView","                .padding(.vertical,8)","                .padding(.horizontal,16)","                .background(OBGray)","            calendarView","        }","    }","    ","    var calendarView: some View {","        OBCalendar(calendar:calendar)","            .dayModifier { baseView, model in","                let modifiedContent = modifyDayView(model: model.day){","                    baseView","                }","                ","                modifySpecialDayView(model: model.day) {","                    modifiedContent","                }","            }","    }","    ","    var weekdaysView: some View {","        let weekdays = getShortLocalizedWeekdays(for: calendar)","        return HStack {","            ForEach(weekdays.indices, id: \\.self) { index in","                Text(weekdays[index])","                    .frame(maxWidth: .infinity)","            }","        }","    }","    ","    var headerView: some View {","        HStack {","            Text(\"Departure\")","            Spacer()","            Image(systemName: \"xmark\")","        }","    }","    ","    func getShortLocalizedWeekdays(","        for calendar: Calendar","    ) -> [String] {","        let firstWeekday = calendar.firstWeekday","        let shortWeekdays = calendar.shortWeekdaySymbols","        let firstWeekdayIndex = firstWeekday - 1","        let reorderedShortWeekdays = Array(shortWeekdays[firstWeekdayIndex...])","        + Array(shortWeekdays[..<firstWeekdayIndex])","        return reorderedShortWeekdays","    }","    ","    private func contentBuilder<Content: View>(@ViewBuilder content: () -> Content) -> Content {","        content()","    }","    ","    func modifyDayView<Content:View>(model: CalendarModel.Day, @ViewBuilder content: () -> Content ) -> some View {","        contentBuilder {","            let day = model.day","            let today = calendar.startOfDay(for: Date())","            let dayDate = calendar.startOfDay(for: model.date)","            ","            if model.isInRangeCurrentMonth {","                if dayDate < today {","                    content()","                        .foregroundColor(.gray)","                }else {","                    content()","                }","            }","        }","    }","    ","    func modifySpecialDayView<Content: View>(","        model: CalendarModel.Day,","        @ViewBuilder content: () -> Content","    ) -> some View {","        contentBuilder {","            \/\/ some logic and view goes here","            let startOfToday = calendar.startOfDay(for: Date())","            let startOfDay = calendar.startOfDay(for: model.date)","            let modifiedContent = content()","            ","            if case .insideRange(.currentMonth) = model.rangeType {","                ","                if (startOfDay < startOfToday) {","                    modifiedContent","                }else {","                    if specialDays.contains(date: model.date) , !specialDays.isEmpty {","                        modifiedContent","                            .overlay(","                                VStack(alignment: .trailing, content: {","                                    Image(systemName: \"circle.fill\")","                                        .resizable()","                                        .frame(width: 6, height: 6)","                                        .foregroundColor(OBBlue)","                                        .frame(maxWidth: .infinity,alignment: .trailing)","                                    Spacer()","                                })","                                .padding(8)","                                ","                            )","                    }else {","                        modifiedContent","                    }","                }","            }else {","                Color.clear","            }","        }","    }","","}","","private extension OBCalendarWithSpecialDay {","    static func makeColor(red: Int, green: Int, blue: Int) -> Color {","        Color(","            red: Double(red) \/ 255,","            green: Double(green) \/ 255,","            blue: Double(blue) \/ 255","        )","    }","    static func makeSpecialDays(calendar: Calendar) -> [Date?: String] {","        [","            calendar.date(from: DateComponents(year: 2024, month: 11, day: 25)): \"Mock Event 1\",","            calendar.date(from: DateComponents(year: 2025, month: 1, day: 1)): \"New Year's Day\",","            calendar.date(from: DateComponents(year: 2024, month: 12, day: 25)): \"Christmas\",","            calendar.date(from: DateComponents(year: 2024, month: 4, day: 23)): \"National Sovereignty and Children's Day\",","            calendar.date(from: DateComponents(year: 2024, month: 5, day: 1)): \"Labor Day\",","            calendar.date(from: DateComponents(year: 2024, month: 8, day: 30)): \"Victory Day\"","        ]","","    }","    ","}","","extension Dictionary where Key == Date?, Value == String {","    func yearExist(year: Int, calendar: Calendar) -> Bool {","        self.contains { element in","            if let date = element.key {","                year == calendar.component(.year, from: date)","            }else {","                false","            }","        }","    }","    ","    func get(year: Int, month: Int, day: Int, calendar: Calendar) -> Dictionary<Date?,String>.Element? {","        self.first { element in","            if let date = element.key {","                return year == calendar.component(.year, from: date)","                && month == calendar.component(.month, from: date)","                && day == calendar.component(.day, from: date)","            }else {","                return false","            }","        }","    }","    ","    func contains(date: Date) -> Bool {","        self.contains { element in","            element.key ==  date","        }","    }","}","","#Preview {","    let calendar = Calendar.current","    return OBCalendarWithSpecialDay(calendar)","}",""],"highlights":[{"line":17},{"line":44},{"line":47},{"line":48},{"line":49},{"line":50},{"line":103},{"line":104},{"line":105},{"line":106},{"line":107},{"line":108},{"line":109},{"line":110},{"line":111},{"line":112},{"line":113},{"line":114},{"line":115},{"line":116},{"line":117},{"line":118},{"line":119},{"line":120},{"line":121},{"line":122},{"line":123},{"line":124},{"line":125},{"line":126},{"line":127},{"line":128},{"line":129},{"line":130},{"line":131},{"line":132},{"line":133},{"line":134},{"line":135},{"line":136},{"line":137},{"line":138},{"line":139},{"line":140},{"line":141},{"line":142},{"line":162}],"fileName":"OBCalendarWithSpecialDay.swift","syntax":"swift","fileType":"swift"},"c4-t1-s1-s1.png":{"variants":[{"url":"\/images\/c4-t1-s1-s1.png","traits":["1x","light"]}],"alt":null,"type":"image","identifier":"c4-t1-s1-s1.png"},"doc://ObiletCalendar/tutorials/ObiletCalendar/CreateBaseView#Add-a-Base-view":{"url":"\/tutorials\/obiletcalendar\/createbaseview#Add-a-Base-view","abstract":[],"type":"section","role":"pseudoSymbol","identifier":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/CreateBaseView#Add-a-Base-view","kind":"section","title":"Add a Base view"},"doc://ObiletCalendar/tutorials/MeetObiletCalendar/Improve-User-Interface":{"url":"\/tutorials\/meetobiletcalendar\/improve-user-interface","role":"article","abstract":[],"type":"topic","kind":"article","title":"Improve User Interface","identifier":"doc:\/\/ObiletCalendar\/tutorials\/MeetObiletCalendar\/Improve-User-Interface"},"c4-t1-s1-s3.png":{"identifier":"c4-t1-s1-s3.png","type":"image","alt":null,"variants":[{"traits":["1x","light"],"url":"\/images\/c4-t1-s1-s3.png"}]},"doc://ObiletCalendar/tutorials/ObiletCalendar/ImplementSingleDateSelection#Implement-Single-Date":{"url":"\/tutorials\/obiletcalendar\/implementsingledateselection#Implement-Single-Date","type":"section","role":"pseudoSymbol","title":"Implement Single Date","identifier":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/ImplementSingleDateSelection#Implement-Single-Date","kind":"section","abstract":[{"type":"text","text":"Implement single date selection for users can select specific date."}]},"doc://ObiletCalendar/tutorials/ObiletCalendar/UnderstandModifiers#Day-Modifier":{"abstract":[],"url":"\/tutorials\/obiletcalendar\/understandmodifiers#Day-Modifier","title":"Day Modifier","kind":"section","role":"pseudoSymbol","type":"section","identifier":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/UnderstandModifiers#Day-Modifier"},"c4-t1-s1-s7.png":{"variants":[{"url":"\/images\/c4-t1-s1-s7.png","traits":["1x","light"]}],"alt":null,"type":"image","identifier":"c4-t1-s1-s7.png"},"c4-t1-s1-s6.png":{"identifier":"c4-t1-s1-s6.png","type":"image","alt":null,"variants":[{"traits":["1x","light"],"url":"\/images\/c4-t1-s1-s6.png"}]},"doc://ObiletCalendar/tutorials/ObiletCalendar/SetupEmptyProject#Create-a-new-project-and-add-ObiletCalendar":{"abstract":[{"type":"text","text":"Setup Empty Project"}],"url":"\/tutorials\/obiletcalendar\/setupemptyproject#Create-a-new-project-and-add-ObiletCalendar","title":"Create a new project and add ObiletCalendar","kind":"section","role":"pseudoSymbol","type":"section","identifier":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/SetupEmptyProject#Create-a-new-project-and-add-ObiletCalendar"},"c4-t1-s1-s1.swift":{"type":"file","identifier":"c4-t1-s1-s1.swift","content":["\/\/","\/\/  OBCalendarWithSpecialDay.swift","\/\/  OBCalendarWithSpecialDay","\/\/","\/\/  Created by Burak GÃ¼l on 19.11.2024.","\/\/","","import SwiftUI","import ObiletCalendar","","struct OBCalendarWithSpecialDay: View {","    var calendar: Calendar = Calendar.current","    ","    var OBRed = Self.makeColor(red: 210, green: 59, blue: 56)","    var OBGray = Self.makeColor(red: 239, green: 239, blue: 239)","    ","    init(_ calendar: Calendar) {","        self.calendar = calendar","    }","    ","    var body: some View {","        VStack(spacing:0) {","            Spacer()","            headerView","                .fixedSize(horizontal: false, vertical: true)","                .padding()","                .background(OBRed)","                .foregroundColor(.white)","            ","            weekdaysView","                .padding(.vertical,8)","                .padding(.horizontal,16)","                .background(OBGray)","            calendarView","        }","    }","    ","    var calendarView: some View {","        OBCalendar(calendar:calendar)","            .dayModifier { baseView, model in","                let day = model.day","                let today = calendar.startOfDay(for: Date())","                let dayDate = calendar.startOfDay(for: day.date)","                ","                if day.isInRangeCurrentMonth {","                    if dayDate < today {","                        baseView","                            .foregroundColor(.gray)","                    }else {","                        baseView","                    }","                }","            }","    }","    ","    var weekdaysView: some View {","        let weekdays = getShortLocalizedWeekdays(for: calendar)","        return HStack {","            ForEach(weekdays.indices, id: \\.self) { index in","                Text(weekdays[index])","                    .frame(maxWidth: .infinity)","            }","        }","    }","    ","    var headerView: some View {","        HStack {","            Text(\"Departure\")","            Spacer()","            Image(systemName: \"xmark\")","        }","    }","    ","    func getShortLocalizedWeekdays(","        for calendar: Calendar","    ) -> [String] {","        let firstWeekday = calendar.firstWeekday","        let shortWeekdays = calendar.shortWeekdaySymbols","        let firstWeekdayIndex = firstWeekday - 1","        let reorderedShortWeekdays = Array(shortWeekdays[firstWeekdayIndex...])","        + Array(shortWeekdays[..<firstWeekdayIndex])","        return reorderedShortWeekdays","    }","}","","private extension OBCalendarWithSpecialDay {","    static func makeColor(red: Int, green: Int, blue: Int) -> Color {","        Color(","            red: Double(red) \/ 255,","            green: Double(green) \/ 255,","            blue: Double(blue) \/ 255","        )","    }","}","","#Preview {","    let calendar = Calendar.current","    return OBCalendarWithSpecialDay(calendar)","}",""],"highlights":[],"syntax":"swift","fileName":"OBCalendarWithSpecialDay.swift","fileType":"swift"},"c4-t1-s1-s4.png":{"identifier":"c4-t1-s1-s4.png","type":"image","alt":null,"variants":[{"url":"\/images\/c4-t1-s1-s4.png","traits":["1x","light"]}]},"doc://ObiletCalendar/tutorials/ObiletCalendar/CreateBaseView#Explore-a-Base-View-Range":{"abstract":[],"kind":"section","type":"section","title":"Explore a Base View Range","role":"pseudoSymbol","url":"\/tutorials\/obiletcalendar\/createbaseview#Explore-a-Base-View-Range","identifier":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/CreateBaseView#Explore-a-Base-View-Range"},"doc://ObiletCalendar/tutorials/ObiletCalendar/UnderstandModifiers":{"type":"topic","abstract":[],"estimatedTime":"2min","kind":"project","url":"\/tutorials\/obiletcalendar\/understandmodifiers","title":"Understand Modifiers","identifier":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/UnderstandModifiers","role":"project"},"doc://ObiletCalendar/tutorials/ObiletCalendar/ImplementDoubleDateSelection":{"url":"\/tutorials\/obiletcalendar\/implementdoubledateselection","role":"project","abstract":[],"estimatedTime":"10min","kind":"project","type":"topic","title":"Implement Double Date Selection","identifier":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/ImplementDoubleDateSelection"},"doc://ObiletCalendar/tutorials/ObiletCalendar/CreateBaseView":{"type":"topic","estimatedTime":"5min","role":"project","abstract":[],"kind":"project","title":"Base View","url":"\/tutorials\/obiletcalendar\/createbaseview","identifier":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/CreateBaseView"},"doc://ObiletCalendar/tutorials/MeetObiletCalendar":{"identifier":"doc:\/\/ObiletCalendar\/tutorials\/MeetObiletCalendar","abstract":[{"text":"Create easily your custom calendar","type":"text"}],"type":"topic","kind":"overview","title":"Meet ObiletCalendar","role":"overview","url":"\/tutorials\/meetobiletcalendar"},"doc://ObiletCalendar/tutorials/ObiletCalendar/UnderstandModifiers#Month-Modifier":{"identifier":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/UnderstandModifiers#Month-Modifier","kind":"section","abstract":[],"type":"section","role":"pseudoSymbol","url":"\/tutorials\/obiletcalendar\/understandmodifiers#Month-Modifier","title":"Month Modifier"},"doc://ObiletCalendar/tutorials/ObiletCalendar/ImplementYourCustomSpecialDay":{"type":"topic","estimatedTime":"7min","role":"project","abstract":[],"kind":"project","title":"Implement Special Day","url":"\/tutorials\/obiletcalendar\/implementyourcustomspecialday","identifier":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/ImplementYourCustomSpecialDay"},"doc://ObiletCalendar/tutorials/ObiletCalendar/ImproveUserInterface#Add-Weekdays-View":{"abstract":[{"type":"text","text":"Improve the user interface by adding weekdays and a header view."}],"kind":"section","type":"section","title":"Add Weekdays View","role":"pseudoSymbol","url":"\/tutorials\/obiletcalendar\/improveuserinterface#Add-Weekdays-View","identifier":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/ImproveUserInterface#Add-Weekdays-View"},"doc://ObiletCalendar/tutorials/ObiletCalendar/ImplementYourCustomSpecialDay#Implement-Your-Custom-Special-Day":{"type":"section","abstract":[],"kind":"section","url":"\/tutorials\/obiletcalendar\/implementyourcustomspecialday#Implement-Your-Custom-Special-Day","identifier":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/ImplementYourCustomSpecialDay#Implement-Your-Custom-Special-Day","title":"Implement Your Custom Special Day","role":"pseudoSymbol"},"doc://ObiletCalendar/tutorials/MeetObiletCalendar/Implement-Special-Day-View":{"abstract":[],"kind":"article","type":"topic","title":"Implement Special Day View","role":"article","url":"\/tutorials\/meetobiletcalendar\/implement-special-day-view","identifier":"doc:\/\/ObiletCalendar\/tutorials\/MeetObiletCalendar\/Implement-Special-Day-View"},"c4-t1-s1-s2.swift":{"fileType":"swift","identifier":"c4-t1-s1-s2.swift","type":"file","highlights":[{"line":41},{"line":42},{"line":75},{"line":76},{"line":77},{"line":78},{"line":79},{"line":80},{"line":81},{"line":82},{"line":83},{"line":84},{"line":85},{"line":86},{"line":87},{"line":88},{"line":89},{"line":90},{"line":91},{"line":92},{"line":93},{"line":94},{"line":95},{"line":106}],"syntax":"swift","content":["\/\/","\/\/  OBCalendarWithSpecialDay.swift","\/\/  OBCalendarWithSpecialDay","\/\/","\/\/  Created by Burak GÃ¼l on 19.11.2024.","\/\/","","import SwiftUI","import ObiletCalendar","","struct OBCalendarWithSpecialDay: View {","    var calendar: Calendar = Calendar.current","    ","    var OBRed = Self.makeColor(red: 210, green: 59, blue: 56)","    var OBGray = Self.makeColor(red: 239, green: 239, blue: 239)","    ","    init(_ calendar: Calendar) {","        self.calendar = calendar","    }","    ","    var body: some View {","        VStack(spacing:0) {","            Spacer()","            headerView","                .fixedSize(horizontal: false, vertical: true)","                .padding()","                .background(OBRed)","                .foregroundColor(.white)","            ","            weekdaysView","                .padding(.vertical,8)","                .padding(.horizontal,16)","                .background(OBGray)","            calendarView","        }","    }","    ","    var calendarView: some View {","        OBCalendar(calendar:calendar)","            .dayModifier { baseView, model in","                modifyDayView(model: model.day){","                    baseView","                }","            }","    }","    ","    var weekdaysView: some View {","        let weekdays = getShortLocalizedWeekdays(for: calendar)","        return HStack {","            ForEach(weekdays.indices, id: \\.self) { index in","                Text(weekdays[index])","                    .frame(maxWidth: .infinity)","            }","        }","    }","    ","    var headerView: some View {","        HStack {","            Text(\"Departure\")","            Spacer()","            Image(systemName: \"xmark\")","        }","    }","    ","    func getShortLocalizedWeekdays(","        for calendar: Calendar","    ) -> [String] {","        let firstWeekday = calendar.firstWeekday","        let shortWeekdays = calendar.shortWeekdaySymbols","        let firstWeekdayIndex = firstWeekday - 1","        let reorderedShortWeekdays = Array(shortWeekdays[firstWeekdayIndex...])","        + Array(shortWeekdays[..<firstWeekdayIndex])","        return reorderedShortWeekdays","    }","    ","    private func contentBuilder<Content: View>(@ViewBuilder content: () -> Content) -> Content {","        content()","    }","    ","    func modifyDayView<Content:View>(model: CalendarModel.Day, @ViewBuilder content: () -> Content ) -> some View {","        contentBuilder {","            let day = model.day","            let today = calendar.startOfDay(for: Date())","            let dayDate = calendar.startOfDay(for: model.date)","            ","            if model.isInRangeCurrentMonth {","                if dayDate < today {","                    content()","                        .foregroundColor(.gray)","                }else {","                    content()","                }","            }","        }","    }","}","","private extension OBCalendarWithSpecialDay {","    static func makeColor(red: Int, green: Int, blue: Int) -> Color {","        Color(","            red: Double(red) \/ 255,","            green: Double(green) \/ 255,","            blue: Double(blue) \/ 255","        )","    }","    ","}","","#Preview {","    let calendar = Calendar.current","    return OBCalendarWithSpecialDay(calendar)","}",""],"fileName":"OBCalendarWithSpecialDay.swift"},"c4-t1-s1-s4.swift":{"type":"file","identifier":"c4-t1-s1-s4.swift","content":["\/\/","\/\/  OBCalendarWithSpecialDay.swift","\/\/  OBCalendarWithSpecialDay","\/\/","\/\/  Created by Burak GÃ¼l on 19.11.2024.","\/\/","","import SwiftUI","import ObiletCalendar","","struct OBCalendarWithSpecialDay: View {","    var calendar: Calendar = Calendar.current","    let specialDays: [Date?: String]","    ","    var OBRed = Self.makeColor(red: 210, green: 59, blue: 56)","    var OBGray = Self.makeColor(red: 239, green: 239, blue: 239)","    ","    init(_ calendar: Calendar) {","        self.calendar = calendar","        self.specialDays = Self.makeSpecialDays(calendar: calendar)","    }","    ","    var body: some View {","        VStack(spacing:0) {","            Spacer()","            headerView","                .fixedSize(horizontal: false, vertical: true)","                .padding()","                .background(OBRed)","                .foregroundColor(.white)","            ","            weekdaysView","                .padding(.vertical,8)","                .padding(.horizontal,16)","                .background(OBGray)","            calendarView","        }","    }","    ","    var calendarView: some View {","        OBCalendar(calendar:calendar)","            .dayModifier { baseView, model in","                modifyDayView(model: model.day){","                    baseView","                }","            }","    }","    ","    var weekdaysView: some View {","        let weekdays = getShortLocalizedWeekdays(for: calendar)","        return HStack {","            ForEach(weekdays.indices, id: \\.self) { index in","                Text(weekdays[index])","                    .frame(maxWidth: .infinity)","            }","        }","    }","    ","    var headerView: some View {","        HStack {","            Text(\"Departure\")","            Spacer()","            Image(systemName: \"xmark\")","        }","    }","    ","    func getShortLocalizedWeekdays(","        for calendar: Calendar","    ) -> [String] {","        let firstWeekday = calendar.firstWeekday","        let shortWeekdays = calendar.shortWeekdaySymbols","        let firstWeekdayIndex = firstWeekday - 1","        let reorderedShortWeekdays = Array(shortWeekdays[firstWeekdayIndex...])","        + Array(shortWeekdays[..<firstWeekdayIndex])","        return reorderedShortWeekdays","    }","    ","    private func contentBuilder<Content: View>(@ViewBuilder content: () -> Content) -> Content {","        content()","    }","    ","    func modifyDayView<Content:View>(model: CalendarModel.Day, @ViewBuilder content: () -> Content ) -> some View {","        contentBuilder {","            let day = model.day","            let today = calendar.startOfDay(for: Date())","            let dayDate = calendar.startOfDay(for: model.date)","            ","            if model.isInRangeCurrentMonth {","                if dayDate < today {","                    content()","                        .foregroundColor(.gray)","                }else {","                    content()","                }","            }","        }","    }","}","","private extension OBCalendarWithSpecialDay {","    static func makeColor(red: Int, green: Int, blue: Int) -> Color {","        Color(","            red: Double(red) \/ 255,","            green: Double(green) \/ 255,","            blue: Double(blue) \/ 255","        )","    }","    ","    static func makeSpecialDays(calendar: Calendar) -> [Date?: String] {","        [","            calendar.date(from: DateComponents(year: 2024, month: 11, day: 25)): \"Mock Event 1\",","            calendar.date(from: DateComponents(year: 2025, month: 1, day: 1)): \"New Year's Day\",","            calendar.date(from: DateComponents(year: 2024, month: 12, day: 25)): \"Christmas\",","            calendar.date(from: DateComponents(year: 2024, month: 4, day: 23)): \"National Sovereignty and Children's Day\",","            calendar.date(from: DateComponents(year: 2024, month: 5, day: 1)): \"Labor Day\",","            calendar.date(from: DateComponents(year: 2024, month: 8, day: 30)): \"Victory Day\"","        ]","    }","    ","}","","extension Dictionary where Key == Date?, Value == String {","    func yearExist(year: Int, calendar: Calendar) -> Bool {","        self.contains { element in","            if let date = element.key {","                year == calendar.component(.year, from: date)","            }else {","                false","            }","        }","    }","    ","    func get(year: Int, month: Int, day: Int, calendar: Calendar) -> Dictionary<Date?,String>.Element? {","        self.first { element in","            if let date = element.key {","                return year == calendar.component(.year, from: date)","                && month == calendar.component(.month, from: date)","                && day == calendar.component(.day, from: date)","            }else {","                return false","            }","        }","    }","    ","    func contains(date: Date) -> Bool {","        self.contains { element in","            element.key ==  date","        }","    }","}","","#Preview {","    let calendar = Calendar.current","    return OBCalendarWithSpecialDay(calendar)","}",""],"highlights":[{"line":122},{"line":123},{"line":124},{"line":125},{"line":126},{"line":127},{"line":128},{"line":129},{"line":130},{"line":131},{"line":132},{"line":133},{"line":134},{"line":135},{"line":136},{"line":137},{"line":138},{"line":139},{"line":140},{"line":141},{"line":142},{"line":143},{"line":144},{"line":145},{"line":146},{"line":147},{"line":148},{"line":149},{"line":150},{"line":151}],"syntax":"swift","fileName":"OBCalendarWithSpecialDay.swift","fileType":"swift"},"c4-t1-s1-s5.png":{"variants":[{"traits":["1x","light"],"url":"\/images\/c4-t1-s1-s5.png"}],"type":"image","alt":null,"identifier":"c4-t1-s1-s5.png"},"doc://ObiletCalendar/tutorials/ObiletCalendar/ImplementSingleDateSelection":{"url":"\/tutorials\/obiletcalendar\/implementsingledateselection","role":"project","abstract":[{"type":"text","text":"Implement single date selection for users can select specific date."}],"estimatedTime":"15min","kind":"project","identifier":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/ImplementSingleDateSelection","title":"Implement Single Date Selection","type":"topic"}}}